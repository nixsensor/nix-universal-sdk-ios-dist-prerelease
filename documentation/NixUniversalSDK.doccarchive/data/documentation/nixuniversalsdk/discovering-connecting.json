{"hierarchy":{"paths":[["doc:\/\/com.nixsensor.universalsdk\/documentation\/NixUniversalSDK"]]},"sections":[],"kind":"article","identifier":{"url":"doc:\/\/com.nixsensor.universalsdk\/documentation\/NixUniversalSDK\/discovering-connecting","interfaceLanguage":"swift"},"schemaVersion":{"major":0,"patch":0,"minor":3},"abstract":[{"type":"text","text":"Use the device scanner to discover Nix devices and open a connection"}],"seeAlsoSections":[{"anchor":"Getting-Started","title":"Getting Started","identifiers":["doc:\/\/com.nixsensor.universalsdk\/documentation\/NixUniversalSDK\/release-notes","doc:\/\/com.nixsensor.universalsdk\/documentation\/NixUniversalSDK\/add-to-xcode","doc:\/\/com.nixsensor.universalsdk\/documentation\/NixUniversalSDK\/activating-license","doc:\/\/com.nixsensor.universalsdk\/documentation\/NixUniversalSDK\/device-operations","doc:\/\/com.nixsensor.universalsdk\/documentation\/NixUniversalSDK\/handling-measurements","doc:\/\/com.nixsensor.universalsdk\/documentation\/NixUniversalSDK\/example-apps","doc:\/\/com.nixsensor.universalsdk\/documentation\/NixUniversalSDK\/wrapper"],"generated":true}],"primaryContentSections":[{"kind":"content","content":[{"type":"heading","text":"Overview","anchor":"Overview","level":2},{"type":"paragraph","inlineContent":[{"text":"Regardless of device type, each unique Nix device can be represented by an object that conforms to the ","type":"text"},{"identifier":"doc:\/\/com.nixsensor.universalsdk\/documentation\/NixUniversalSDK\/IDeviceCompat","isActive":true,"type":"reference"},{"type":"text","text":" protocol. To obtain instances of the device object, they need to first be discovered using the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.nixsensor.universalsdk\/documentation\/NixUniversalSDK\/DeviceScanner"},{"text":". They can also be recalled at a later time directly using their ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.nixsensor.universalsdk\/documentation\/NixUniversalSDK\/IDeviceCompat\/id"},{"text":" property (for Bluetooth connected devices only).","type":"text"}]},{"text":"Device Discovery","anchor":"Device-Discovery","level":3,"type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.nixsensor.universalsdk\/documentation\/NixUniversalSDK\/DeviceScanner"},{"type":"text","text":" implements the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.nixsensor.universalsdk\/documentation\/NixUniversalSDK\/IDeviceScanner"},{"text":" protocol and searches for nearby Nix devices using Bluetooth. On macOS, the ","type":"text"},{"type":"reference","identifier":"doc:\/\/com.nixsensor.universalsdk\/documentation\/NixUniversalSDK\/DeviceScanner","isActive":true},{"type":"text","text":" will also report devices connected via USB. Scanner events are reported via:"}]},{"items":[{"content":[{"inlineContent":[{"identifier":"doc:\/\/com.nixsensor.universalsdk\/documentation\/NixUniversalSDK\/ScannerStateDelegate","isActive":true,"type":"reference"},{"text":":","type":"text"}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Delegate which must be specified when initializing the "},{"identifier":"doc:\/\/com.nixsensor.universalsdk\/documentation\/NixUniversalSDK\/DeviceScanner","type":"reference","isActive":true}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Reports when the scanner initializes, starts, and stops searching for devices"}],"type":"paragraph"}]}],"type":"unorderedList"}]},{"content":[{"type":"paragraph","inlineContent":[{"isActive":true,"type":"reference","identifier":"doc:\/\/com.nixsensor.universalsdk\/documentation\/NixUniversalSDK\/DeviceFoundCallback"},{"type":"text","text":":"}]},{"items":[{"content":[{"inlineContent":[{"type":"text","text":"Closure which is called by the scanner each time that an "},{"identifier":"doc:\/\/com.nixsensor.universalsdk\/documentation\/NixUniversalSDK\/IDeviceCompat","isActive":true,"type":"reference"},{"type":"text","text":" instance has been found"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Note that this will be called both when a new device is found and when the RSSI\/signal strength of a previously discovered device has changed.","type":"text"}]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"text":"It is possible to use the ","type":"text"},{"type":"reference","identifier":"doc:\/\/com.nixsensor.universalsdk\/documentation\/NixUniversalSDK\/IDeviceCompat\/id","isActive":true},{"type":"text","text":" parameter as a means to uniquely identify discovered devices."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Do not hold reference to stale "},{"identifier":"doc:\/\/com.nixsensor.universalsdk\/documentation\/NixUniversalSDK\/IDeviceCompat","isActive":true,"type":"reference"},{"type":"text","text":" instances; use the most recently reported device instance when connecting to a device later."}]}]}]}]}],"type":"unorderedList"}]}],"type":"unorderedList"},{"name":"Note","style":"note","type":"aside","content":[{"type":"paragraph","inlineContent":[{"text":"Devices can only be discovered or recalled while your SDK licence is in an ","type":"text"},{"identifier":"doc:\/\/com.nixsensor.universalsdk\/documentation\/NixUniversalSDK\/LicenseManagerState\/ACTIVE","isActive":true,"type":"reference"},{"text":" state; the current value is available via ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.nixsensor.universalsdk\/documentation\/NixUniversalSDK\/LicenseManager\/state"},{"text":". Only device types supported by your license can be discovered and connected; the current list of allowed types is available via ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.nixsensor.universalsdk\/documentation\/NixUniversalSDK\/LicenseManager\/allowedDeviceTypes-4f98s"},{"type":"text","text":"."}]}]},{"inlineContent":[{"text":"To use the ","type":"text"},{"type":"reference","identifier":"doc:\/\/com.nixsensor.universalsdk\/documentation\/NixUniversalSDK\/DeviceScanner","isActive":true},{"type":"text","text":":"}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Initialize the scanner and check its state in "},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.nixsensor.universalsdk\/documentation\/NixUniversalSDK\/ScannerStateDelegate\/onScannerInit(_:state:)"}]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"After a successful initialization, the state will be "},{"isActive":true,"identifier":"doc:\/\/com.nixsensor.universalsdk\/documentation\/NixUniversalSDK\/DeviceScannerState\/IDLE","type":"reference"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"If the state is ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.nixsensor.universalsdk\/documentation\/NixUniversalSDK\/DeviceScannerState\/ERROR_LICENSE"},{"text":", check ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.nixsensor.universalsdk\/documentation\/NixUniversalSDK\/LicenseManager\/state"},{"type":"text","text":" for further details."}],"type":"paragraph"}]}]}]},{"content":[{"inlineContent":[{"text":"If the scanner has initialized successfully, the scanner can be started using ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.nixsensor.universalsdk\/documentation\/NixUniversalSDK\/IDeviceScanner\/start(scanPeriodMs:closure:)"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"By default, the scanner will search for a period "},{"identifier":"doc:\/\/com.nixsensor.universalsdk\/documentation\/NixUniversalSDK\/DeviceScanner\/DEFAULT_GENERAL_SCAN_PERIOD_MS","isActive":true,"type":"reference"},{"type":"text","text":", but this interval can be overridden by providing an argument for "},{"code":"scanPeriodMs","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"}]}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Discovered devices will be reported via a ","type":"text"},{"identifier":"doc:\/\/com.nixsensor.universalsdk\/documentation\/NixUniversalSDK\/DeviceFoundCallback","type":"reference","isActive":true},{"text":" closure. At this stage, it is valid to check a limited number of parameters:","type":"text"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","isActive":true,"identifier":"doc:\/\/com.nixsensor.universalsdk\/documentation\/NixUniversalSDK\/IDeviceCompat\/id"},{"type":"text","text":": Device identifier string"}]}]},{"content":[{"inlineContent":[{"type":"reference","identifier":"doc:\/\/com.nixsensor.universalsdk\/documentation\/NixUniversalSDK\/IDeviceCompat\/rssi","isActive":true},{"type":"text","text":": Device signal strength (-127 to 0). Will be 0 for USB connected devices"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","isActive":true,"identifier":"doc:\/\/com.nixsensor.universalsdk\/documentation\/NixUniversalSDK\/IDeviceCompat\/interfaceType"},{"text":": Indicates whether the device was found via Bluetooth or USB connection","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","identifier":"doc:\/\/com.nixsensor.universalsdk\/documentation\/NixUniversalSDK\/IDeviceCompat\/type","isActive":true},{"type":"text","text":": Indicates the specific device type"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","identifier":"doc:\/\/com.nixsensor.universalsdk\/documentation\/NixUniversalSDK\/IDeviceCompat\/name","isActive":true},{"type":"text","text":": Full name of the device (e.g. ‘Nix Spectro 2’)"}]}]}]}]},{"content":[{"inlineContent":[{"text":"The device search will run for the specified duration, after which ","type":"text"},{"isActive":true,"identifier":"doc:\/\/com.nixsensor.universalsdk\/documentation\/NixUniversalSDK\/ScannerStateDelegate\/onScannerStopped(_:)","type":"reference"},{"type":"text","text":" is called. The device search can also be manually stopped using "},{"identifier":"doc:\/\/com.nixsensor.universalsdk\/documentation\/NixUniversalSDK\/IDeviceScanner\/stop()","isActive":true,"type":"reference"},{"text":".","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"To recall a specific Bluetooth connected device in a later app session, you can use ","type":"text"},{"identifier":"doc:\/\/com.nixsensor.universalsdk\/documentation\/NixUniversalSDK\/IDeviceScanner\/startSearchForId(_:closure:)","type":"reference","isActive":true},{"text":". This will run the ","type":"text"},{"type":"reference","identifier":"doc:\/\/com.nixsensor.universalsdk\/documentation\/NixUniversalSDK\/DeviceScanner","isActive":true},{"text":" searching for a specific device by its identifier, calling back only once when the device is first found.","type":"text"}],"type":"paragraph"}]}],"type":"unorderedList"},{"type":"heading","text":"Swift example","level":4,"anchor":"Swift-example"},{"syntax":"swift","code":["import UIKit","import NixUniversalSDK","","class MyViewController: UIViewController, ScannerStateDelegate {","    var scanner: IDeviceScanner? = nil","","    override func viewDidLoad() {","        super.viewDidLoad()","","        \/\/ Do any additional setup after loading the view.","        \/\/ Your existing code here ...","        ","        \/\/ Initialize DeviceScanner","        scanner = DeviceScanner(delegate: self)","    }","","    \/\/ MARK: ScannerStateDelegate","    func onScannerInit(","        _ sender: NixUniversalSDK.IDeviceScanner, ","        state: DeviceScannerState","    ) {        ","        \/\/ Scanner has initialized","        switch state {","        case .IDLE:","            \/\/ Successful initialization","            \/\/ Can start a search now ...","            break","        case .ERROR_LICENSE:","            \/\/ There is an issue with the LicenseManager","            \/\/ Check LicenseManager.state ...","            break","        case .ERROR_BLUETOOTH_PERMISSIONS:","            \/\/ User has denied access to Bluetooth","            \/\/ Handle error ...","            break","        case .ERROR_BLUETOOTH_DISABLED, .ERROR_BLUETOOTH_UNAVAILABLE:","            \/\/ Bluetooth is disabled or not available","            \/\/ Handle error...        ","            break","        default:","            \/\/ Other error ...","            break","        }","    }","","    func onScannerStarted(","        _ sender: NixUniversalSDK.IDeviceScanner","    ) {","        \/\/ Scanner has started","        \/\/ ...","    }","","    func onScannerStopped(","        _ sender: NixUniversalSDK.IDeviceScanner","    ) {","        \/\/ Scanner has stopped","        \/\/ ...","    }","","    \/\/ MARK: DeviceScanner","    func startSearch {","        \/\/ Define callback to be invoked when devices are found","        let callback: DeviceFoundCallback = { device in","            if let device {","                \/\/ Nearby device found","                \/\/ Handle discovery here ...","","                \/\/ Valid to query some parameters now:","                print(\"Found \\(device.name) with id \\(device.id) at RSSI \\(device.rssi)\")","            }","        }","","        \/\/ Start the scanner if it is non-null","        let newState: DeviceScannerState =","            scanner?.start(closure: callback) ?? .COLD","    }","}"],"type":"codeListing"},{"level":4,"anchor":"Objective-C-example","type":"heading","text":"Objective-C example"},{"syntax":"objc","type":"codeListing","code":["#import \"MyViewController.h\"","#import <NixUniversalSDK\/universalsdk.h>","","@interface MyViewController () <ScannerStateDelegate>","","@property (nonatomic, strong) DeviceScannerNullable scanner;","","@end","","@implementation MyViewController","","#pragma mark UIViewController","- (void)viewDidLoad {","    [super viewDidLoad];","    \/\/ Do any additional setup after loading the view.","    ","    \/\/ Initialize DeviceScanner","    self.scanner = [[DeviceScanner alloc] initWithDelegate:self];","}","","#pragma mark ScannerStateDelegate","- (void)onScannerInit:(DeviceScannerNonnull)sender","                state:(enum DeviceScannerState)state {","    \/\/ Scanner has initialized","    switch (state) {","        case DeviceScannerStateIDLE:","            \/\/ Successful initialization","            \/\/ Can start a search now...","            break;","        case DeviceScannerStateERROR_LICENSE:","            \/\/ There is an issue with the LicenseManager","            \/\/ Check LicenseManager.state ...","        case DeviceScannerStateERROR_BLUETOOTH_PERMISSIONS:","            \/\/ User has denied access to Bluetooth","            \/\/ Handle error ...","            break;","        case DeviceScannerStateERROR_BLUETOOTH_DISABLED:","        case DeviceScannerStateERROR_BLUETOOTH_UNAVAILABLE:","            \/\/ Bluetooth is disabled or not available","            \/\/ Handle error...","            break;","        default:","            \/\/ Other error ...","            break;","    }","}","","- (void)onScannerStarted:(DeviceScannerNonnull)sender {","    \/\/ Scanner has started","    \/\/ ...","}","","- (void)onScannerStopped:(DeviceScannerNonnull)sender {","    \/\/ Scanner has stopped","    \/\/ ...","}","","#pragma mark DeviceScanner","- (void) startSearch {","    \/\/ Define closure to be called when devices are found","    DeviceCompatBlock closure = ^(DeviceCompatNullable device) {","        if (device != nil) {","            \/\/ Nearby device found","            \/\/ Handle discovery here ...","            ","            \/\/ Valid to query some parameters now","            NSLog(@\"Found %@ with id %@ at RSSI %d\",","                  device.name,","                  device.id,","                  (int)device.rssi);","        }","    };","    ","    \/\/ Start the search","    enum DeviceScannerState newState = DeviceScannerStateCOLD;","    if (self.scanner != nil) {","        newState = [self.scanner startWithClosure:closure];","    }","}","@end"]},{"level":3,"text":"Opening a connection","anchor":"Opening-a-connection","type":"heading"},{"type":"paragraph","inlineContent":[{"text":"Once an ","type":"text"},{"type":"reference","identifier":"doc:\/\/com.nixsensor.universalsdk\/documentation\/NixUniversalSDK\/IDeviceCompat","isActive":true},{"text":" instance has been obtained, a connection can be opened by calling ","type":"text"},{"identifier":"doc:\/\/com.nixsensor.universalsdk\/documentation\/NixUniversalSDK\/IDeviceCompat\/connect(delegate:)","isActive":true,"type":"reference"},{"text":". Connection state changes are provided via a ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.nixsensor.universalsdk\/documentation\/NixUniversalSDK\/DeviceStateDelegate"},{"type":"text","text":"."}]},{"type":"orderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Implement the ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.nixsensor.universalsdk\/documentation\/NixUniversalSDK\/DeviceStateDelegate"},{"text":" protocol in your class","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Stop the ","type":"text"},{"type":"reference","identifier":"doc:\/\/com.nixsensor.universalsdk\/documentation\/NixUniversalSDK\/DeviceScanner","isActive":true},{"type":"text","text":" before opening a connection, if still running."}]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"text":"It is safe to call ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.nixsensor.universalsdk\/documentation\/NixUniversalSDK\/IDeviceScanner\/stop()"},{"text":" at any time, even if already stopped","type":"text"}],"type":"paragraph"}]}]}]},{"content":[{"inlineContent":[{"text":"Start the connection process using ","type":"text"},{"type":"reference","identifier":"doc:\/\/com.nixsensor.universalsdk\/documentation\/NixUniversalSDK\/IDeviceCompat\/connect(delegate:)","isActive":true}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"The connection process is asynchronous and "},{"identifier":"doc:\/\/com.nixsensor.universalsdk\/documentation\/NixUniversalSDK\/IDeviceCompat\/connect(delegate:)","isActive":true,"type":"reference"},{"text":" will return immediately. If a connection activity indicator is shown, it can be shown immediately before calling this method.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"A call to ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.nixsensor.universalsdk\/documentation\/NixUniversalSDK\/IDeviceCompat\/connect(delegate:)"},{"text":" will always result in either the ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.nixsensor.universalsdk\/documentation\/NixUniversalSDK\/DeviceStateDelegate\/onConnected(_:)"},{"type":"text","text":" or "},{"isActive":true,"identifier":"doc:\/\/com.nixsensor.universalsdk\/documentation\/NixUniversalSDK\/DeviceStateDelegate\/onDisconnected(_:status:)","type":"reference"},{"type":"text","text":" event being triggered."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Device operations are not possible until the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.nixsensor.universalsdk\/documentation\/NixUniversalSDK\/DeviceStateDelegate\/onConnected(_:)"},{"type":"text","text":" callback is received (successful connection)"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"If the connection process fails, ","type":"text"},{"identifier":"doc:\/\/com.nixsensor.universalsdk\/documentation\/NixUniversalSDK\/DeviceStateDelegate\/onDisconnected(_:status:)","isActive":true,"type":"reference"},{"text":" will be called with an appropriate status code indicating the cause of the error.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"isActive":true,"type":"reference","identifier":"doc:\/\/com.nixsensor.universalsdk\/documentation\/NixUniversalSDK\/DeviceStateDelegate\/onDisconnected(_:status:)"},{"type":"text","text":" will also be called later whenever the device is disconnected. This can occur normally (i.e. - if the host device calls "},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.nixsensor.universalsdk\/documentation\/NixUniversalSDK\/IDeviceCompat\/disconnect()"},{"text":"), or abnormally (i.e. - if the connection is dropped due to an error or low Bluetooth signal strength).","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Your license is linked to a specific allocation of Nix devices and will not operate with devices from another allocation."}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"At connection time, the SDK will read an allocation code stored on the Nix device and compare to the license information.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"If this check does not pass, the SDK will contact a Nix authentication server to check if that device serial number is authorized."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"If the device cannot be authenticated (i.e. – an unknown allocation code was found and an internet connection is unavailable), the device will be disconnected with the status "},{"identifier":"doc:\/\/com.nixsensor.universalsdk\/documentation\/NixUniversalSDK\/DeviceStatus\/ERROR_UNAUTHORIZED","isActive":true,"type":"reference"},{"type":"text","text":"."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"The internet connection is required only once every 30 days – once authorized, this status is saved, and connections can be made offline for this time period.","type":"text"}]}]}],"type":"unorderedList"}]}]}]},{"content":[{"inlineContent":[{"type":"text","text":"When the user has finished using the device, the connection can be closed using "},{"identifier":"doc:\/\/com.nixsensor.universalsdk\/documentation\/NixUniversalSDK\/IDeviceCompat\/disconnect()","type":"reference","isActive":true}],"type":"paragraph"}]}]},{"anchor":"Swift-example","level":4,"text":"Swift example","type":"heading"},{"syntax":"swift","code":["import UIKit","import NixUniversalSDK","","class MyConnectingViewController: UIViewController, DeviceStateDelegate {","    \/\/ Your existing code here","    \/\/ ...","","    \/\/ Device instance found by the DeviceScanner:","    var device: IDeviceCompat","","    \/\/ Example of calling `connect`","    func connectToDevice() {","        device.connect(self)","    }","","    \/\/ MARK: DeviceStateDelegate","    func onConnected(","        _ sender: NixUniversalSDK.IDeviceCompat","    ) {","        \/\/ Device has connected successfully","        \/\/ Device properties can now be queried","        \/\/ Device commands\/operations can now run","        \/\/ ...","    }","    ","    func onDisconnected(","        _ sender: NixUniversalSDK.IDeviceCompat, ","        status: NixUniversalSDK.DeviceStatus","    ) {","        \/\/ Handle status codes here, if desired in your application","        \/\/ At a minimum should check for ERROR_UNAUTHORIZED status (see notes)","        switch status {","        case .ERROR_UNAUTHORIZED:","            \/\/ Device not authorized for this license UUID","            \/\/ ...","            break","        case .ERROR_LICENSE:","            \/\/ There is an issue with the LicenseManager","            \/\/ Check LicenseManager.state","            \/\/ ...","            break","        case .SUCCESS:","            \/\/ Normal disconnect, triggered by device.disconnect()","            \/\/ ...","            break","        case .ERROR_DROPPED_CONNECTION:","            \/\/ Nix device dropped the connection","            \/\/ ...","            break","        case .ERROR_TIMEOUT:","            \/\/ Connection to Nix device timed out","            \/\/ ...","            break","        case .ERROR_MAX_ATTEMPTS, ","             .ERROR_UNSUPPORTED_DEVICE, ","             .ERROR_INTERNAL:","            \/\/ Other internal errors","            \/\/ ...","            break","        default:","            break","        }","    }","","    func onBatteryStateChanged(","        _ sender: NixUniversalSDK.IDeviceCompat, ","        newState: NSNumber","    ) {","        \/\/ Battery level has updated","        \/\/ ...","        print(\"Battery level has updated to \\(newState)\")","    }","","    func onExtPowerStateChanged(","        _ sender: NixUniversalSDK.IDeviceCompat, ","        newState: Bool","    ) {","        \/\/ External power has been connected or disconnected","        \/\/ ...","        print(\"External power connected is now \\(newState)\")","    }","}"],"type":"codeListing"},{"level":4,"text":"Objective-C example","anchor":"Objective-C-example","type":"heading"},{"type":"codeListing","syntax":"objc","code":["#import \"MyConnectingViewController.h\"","#import <NixUniversalSDK\/universalsdk.h>","","@interface MyConnectingViewController () <DeviceStateDelegate>","","\/\/ Device instance found by the DeviceScanner","@property(nonatomic, strong) DeviceCompatNonnull device;","","@end","","@implementation MyConnectingViewController","","\/\/ Your existing code here","\/\/ ...","","\/\/ Example of calling `connect`","- (void) connectToDevice {","    [self.device connect:self];","}","","#pragma mark DeviceStateDelegate","- (void)onConnected:(DeviceCompatNonnull)sender {","    \/\/ Device has connected successfully","    \/\/ Device properties can now be queried","    \/\/ Device commands\/operations can now run","    \/\/ ...","}","","- (void)onDisconnected:(DeviceCompatNonnull)sender","                status:(enum DeviceStatus)status {","    \/\/ Handle status codes here, if desired in your application","    \/\/ At a minimum should check for ERROR_UNAUTHORIZED status (see notes)","    switch (status) {","        case DeviceStatusERROR_UNAUTHORIZED:","            \/\/ Device not authorized for this license UUID","            \/\/ ...","            break;","        case DeviceStatusERROR_LICENSE:","            \/\/ There is an issue with the LicenseManager","            \/\/ Check LicenseManager.state","            \/\/ ...","            break;","        case DeviceStatusSUCCESS:","            \/\/ Normal disconnect, triggered by [device disconnect];","            \/\/ ...","            break;","        case DeviceStatusERROR_DROPPED_CONNECTION:","            \/\/ Nix device dropped the connection","            \/\/ ...","            break;","        case DeviceStatusERROR_TIMEOUT:","            \/\/ Connection to Nix device timed out","            \/\/ ...","            break;","        case DeviceStatusERROR_MAX_ATTEMPTS:","        case DeviceStatusERROR_UNSUPPORTED_DEVICE:","        case DeviceStatusERROR_INTERNAL:","            \/\/ Other internal errors","            \/\/ ...","            break;","    }","}","","- (void)onBatteryStateChanged:(DeviceCompatNonnull)sender","                     newState:(NSNumber * _Nonnull)newState {","    \/\/ Battery level has updated","    \/\/ ...","    NSLog(@\"Battery level has updated to %@\", newState);","}","","- (void)onExtPowerStateChanged:(DeviceCompatNonnull)sender","                      newState:(BOOL)newState {","    \/\/ External power has been connected or disconnected","    \/\/ ...","    NSString* stateString = newState ? @\"true\" : @\"false\";","    NSLog(@\"External power connected is now %@\", stateString);","}","","@end"]},{"type":"heading","text":"Next Steps","level":2,"anchor":"Next-Steps"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"isActive":true,"type":"reference","identifier":"doc:\/\/com.nixsensor.universalsdk\/documentation\/NixUniversalSDK\/device-operations"}]}]}],"type":"unorderedList"}]}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/nixuniversalsdk\/discovering-connecting"]},{"traits":[{"interfaceLanguage":"occ"}],"paths":["\/documentation\/nixuniversalsdk\/discovering-connecting"]}],"metadata":{"role":"article","title":"Discovering and Connecting to Nix Devices","roleHeading":"Article","modules":[{"name":"NixUniversalSDK"}]},"references":{"doc://com.nixsensor.universalsdk/documentation/NixUniversalSDK/IDeviceCompat/id":{"navigatorTitle":[{"text":"id","kind":"identifier"}],"abstract":[{"text":"Unique identifier for this device","type":"text"}],"identifier":"doc:\/\/com.nixsensor.universalsdk\/documentation\/NixUniversalSDK\/IDeviceCompat\/id","required":true,"kind":"symbol","type":"topic","title":"id","role":"symbol","url":"\/documentation\/nixuniversalsdk\/idevicecompat\/id","fragments":[{"text":"var","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"id"},{"kind":"text","text":": "},{"preciseIdentifier":"s:SS","kind":"typeIdentifier","text":"String"}]},"doc://com.nixsensor.universalsdk/documentation/NixUniversalSDK/DeviceFoundCallback":{"navigatorTitle":[{"kind":"identifier","text":"DeviceFoundCallback"}],"url":"\/documentation\/nixuniversalsdk\/devicefoundcallback","identifier":"doc:\/\/com.nixsensor.universalsdk\/documentation\/NixUniversalSDK\/DeviceFoundCallback","role":"symbol","kind":"symbol","type":"topic","title":"DeviceFoundCallback","abstract":[{"text":"Definition for a closure invoked when an ","type":"text"},{"type":"reference","identifier":"doc:\/\/com.nixsensor.universalsdk\/documentation\/NixUniversalSDK\/IDeviceScanner","isActive":true},{"type":"text","text":" has discovered a supported Nix device"}],"fragments":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"text":"DeviceFoundCallback","kind":"identifier"}]},"doc://com.nixsensor.universalsdk/documentation/NixUniversalSDK/IDeviceCompat/disconnect()":{"navigatorTitle":[{"text":"disconnect","kind":"identifier"}],"type":"topic","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"disconnect"},{"text":"()","kind":"text"}],"abstract":[{"text":"Disconnect from this Nix device, or cancel a connection attempt currently in progress.","type":"text"}],"required":true,"url":"\/documentation\/nixuniversalsdk\/idevicecompat\/disconnect()","title":"disconnect()","kind":"symbol","identifier":"doc:\/\/com.nixsensor.universalsdk\/documentation\/NixUniversalSDK\/IDeviceCompat\/disconnect()","role":"symbol"},"doc://com.nixsensor.universalsdk/documentation/NixUniversalSDK/example-apps":{"identifier":"doc:\/\/com.nixsensor.universalsdk\/documentation\/NixUniversalSDK\/example-apps","abstract":[{"type":"text","text":"Explore source code for demo iOS and macOS applications"}],"title":"Example Applications","type":"topic","kind":"article","url":"\/documentation\/nixuniversalsdk\/example-apps","role":"article"},"doc://com.nixsensor.universalsdk/documentation/NixUniversalSDK/IDeviceScanner/startSearchForId(_:closure:)":{"abstract":[{"text":"Starts a search for a specific Nix device using Bluetooth. The search will run until the specified device is found, or until ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.nixsensor.universalsdk\/documentation\/NixUniversalSDK\/DeviceScanner\/DEFAULT_SINGLE_DEVICE_PERIOD_MS"},{"text":" elapses, whichever is shorter. Invoked with a ","type":"text"},{"code":"nil","type":"codeVoice"},{"text":" result when a search times out and device was not found.","type":"text"}],"type":"topic","title":"startSearchForId(_:closure:)","navigatorTitle":[{"kind":"identifier","text":"startSearchForId:withClosure:"}],"role":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"startSearchForId","kind":"identifier"},{"text":"(","kind":"text"},{"text":"String","kind":"typeIdentifier","preciseIdentifier":"s:SS"},{"text":", ","kind":"text"},{"text":"closure","kind":"externalParam"},{"kind":"text","text":": "},{"text":"DeviceFoundCallback","kind":"typeIdentifier","preciseIdentifier":"s:15NixUniversalSDK19DeviceFoundCallbacka"},{"text":") -> ","kind":"text"},{"preciseIdentifier":"c:@M@NixUniversalSDK@E@DeviceScannerState","text":"DeviceScannerState","kind":"typeIdentifier"}],"url":"\/documentation\/nixuniversalsdk\/idevicescanner\/startsearchforid(_:closure:)","required":true,"identifier":"doc:\/\/com.nixsensor.universalsdk\/documentation\/NixUniversalSDK\/IDeviceScanner\/startSearchForId(_:closure:)","kind":"symbol"},"doc://com.nixsensor.universalsdk/documentation/NixUniversalSDK/IDeviceCompat":{"identifier":"doc:\/\/com.nixsensor.universalsdk\/documentation\/NixUniversalSDK\/IDeviceCompat","title":"IDeviceCompat","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"IDeviceCompat","kind":"identifier"}],"type":"topic","navigatorTitle":[{"text":"IDeviceCompat","kind":"identifier"}],"role":"symbol","kind":"symbol","abstract":[{"type":"text","text":"Protocol describing the supported properties and methods for a Nix device. "},{"type":"reference","identifier":"doc:\/\/com.nixsensor.universalsdk\/documentation\/NixUniversalSDK\/IDeviceCompat","isActive":true},{"text":" objects are found nearby using the ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.nixsensor.universalsdk\/documentation\/NixUniversalSDK\/DeviceScanner"},{"type":"text","text":"."}],"url":"\/documentation\/nixuniversalsdk\/idevicecompat"},"doc://com.nixsensor.universalsdk/documentation/NixUniversalSDK/IDeviceCompat/type":{"type":"topic","kind":"symbol","required":true,"identifier":"doc:\/\/com.nixsensor.universalsdk\/documentation\/NixUniversalSDK\/IDeviceCompat\/type","title":"type","role":"symbol","navigatorTitle":[{"text":"type","kind":"identifier"}],"fragments":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"type"},{"kind":"text","text":": "},{"text":"DeviceType","kind":"typeIdentifier","preciseIdentifier":"c:@M@NixUniversalSDK@E@DeviceType"}],"abstract":[{"text":"Type for this device","type":"text"}],"url":"\/documentation\/nixuniversalsdk\/idevicecompat\/type"},"doc://com.nixsensor.universalsdk/documentation/NixUniversalSDK/IDeviceCompat/name":{"abstract":[{"type":"text","text":"Name for this device"}],"title":"name","role":"symbol","identifier":"doc:\/\/com.nixsensor.universalsdk\/documentation\/NixUniversalSDK\/IDeviceCompat\/name","kind":"symbol","required":true,"url":"\/documentation\/nixuniversalsdk\/idevicecompat\/name","navigatorTitle":[{"kind":"identifier","text":"name"}],"fragments":[{"kind":"keyword","text":"var"},{"text":" ","kind":"text"},{"kind":"identifier","text":"name"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"String","preciseIdentifier":"s:SS"}],"type":"topic"},"doc://com.nixsensor.universalsdk/documentation/NixUniversalSDK/DeviceScannerState/ERROR_LICENSE":{"abstract":[{"text":"Bluetooth scanner could not start due to a problem with the ","type":"text"},{"type":"reference","identifier":"doc:\/\/com.nixsensor.universalsdk\/documentation\/NixUniversalSDK\/LicenseManager","isActive":true},{"type":"text","text":". Check "},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.nixsensor.universalsdk\/documentation\/NixUniversalSDK\/LicenseManager\/state"},{"text":" for details.","type":"text"}],"navigatorTitle":[{"text":"DeviceScannerStateERROR_LICENSE","kind":"identifier"}],"url":"\/documentation\/nixuniversalsdk\/devicescannerstate\/error_license","title":"DeviceScannerState.ERROR_LICENSE","type":"topic","role":"symbol","kind":"symbol","fragments":[{"text":"case","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ERROR_LICENSE","kind":"identifier"}],"identifier":"doc:\/\/com.nixsensor.universalsdk\/documentation\/NixUniversalSDK\/DeviceScannerState\/ERROR_LICENSE"},"doc://com.nixsensor.universalsdk/documentation/NixUniversalSDK/LicenseManager/allowedDeviceTypes-4f98s":{"abstract":[{"type":"text","text":"Set of device types supported by the current license. Available in Swift only."}],"kind":"symbol","type":"topic","identifier":"doc:\/\/com.nixsensor.universalsdk\/documentation\/NixUniversalSDK\/LicenseManager\/allowedDeviceTypes-4f98s","title":"allowedDeviceTypes","url":"\/documentation\/nixuniversalsdk\/licensemanager\/alloweddevicetypes-4f98s","role":"symbol","fragments":[{"kind":"keyword","text":"static"},{"text":" ","kind":"text"},{"kind":"keyword","text":"var"},{"text":" ","kind":"text"},{"kind":"identifier","text":"allowedDeviceTypes"},{"kind":"text","text":": "},{"text":"Set","kind":"typeIdentifier","preciseIdentifier":"s:Sh"},{"kind":"text","text":"<"},{"text":"DeviceType","preciseIdentifier":"c:@M@NixUniversalSDK@E@DeviceType","kind":"typeIdentifier"},{"text":">","kind":"text"}]},"doc://com.nixsensor.universalsdk/documentation/NixUniversalSDK/device-operations":{"kind":"article","role":"article","identifier":"doc:\/\/com.nixsensor.universalsdk\/documentation\/NixUniversalSDK\/device-operations","abstract":[{"text":"Take measurements, set device options, and query device properties","type":"text"}],"type":"topic","title":"Device Operations","url":"\/documentation\/nixuniversalsdk\/device-operations"},"doc://com.nixsensor.universalsdk/documentation/NixUniversalSDK/ScannerStateDelegate":{"title":"ScannerStateDelegate","navigatorTitle":[{"kind":"identifier","text":"ScannerStateDelegate"}],"abstract":[{"type":"text","text":"Protocol definition for a callback to be invoked when an "},{"isActive":true,"identifier":"doc:\/\/com.nixsensor.universalsdk\/documentation\/NixUniversalSDK\/IDeviceScanner","type":"reference"},{"text":" starts or stops a search.","type":"text"}],"identifier":"doc:\/\/com.nixsensor.universalsdk\/documentation\/NixUniversalSDK\/ScannerStateDelegate","kind":"symbol","type":"topic","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ScannerStateDelegate","kind":"identifier"}],"role":"symbol","url":"\/documentation\/nixuniversalsdk\/scannerstatedelegate"},"doc://com.nixsensor.universalsdk/documentation/NixUniversalSDK/IDeviceCompat/interfaceType":{"abstract":[{"type":"text","text":"Interface \/ connection type for this device"}],"title":"interfaceType","role":"symbol","identifier":"doc:\/\/com.nixsensor.universalsdk\/documentation\/NixUniversalSDK\/IDeviceCompat\/interfaceType","kind":"symbol","required":true,"url":"\/documentation\/nixuniversalsdk\/idevicecompat\/interfacetype","navigatorTitle":[{"kind":"identifier","text":"interfaceType"}],"fragments":[{"kind":"keyword","text":"var"},{"text":" ","kind":"text"},{"text":"interfaceType","kind":"identifier"},{"text":": ","kind":"text"},{"text":"InterfaceType","preciseIdentifier":"c:@M@NixUniversalSDK@E@InterfaceType","kind":"typeIdentifier"}],"type":"topic"},"doc://com.nixsensor.universalsdk/documentation/NixUniversalSDK/IDeviceCompat/connect(delegate:)":{"identifier":"doc:\/\/com.nixsensor.universalsdk\/documentation\/NixUniversalSDK\/IDeviceCompat\/connect(delegate:)","navigatorTitle":[{"text":"connect:","kind":"identifier"}],"abstract":[{"type":"text","text":"Open a connection to this Nix device. This operation is asynchronous and this method returns immediately. Status of this operation is updated via the provided "},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.nixsensor.universalsdk\/documentation\/NixUniversalSDK\/DeviceStateDelegate"},{"text":" callback.","type":"text"}],"title":"connect(delegate:)","kind":"symbol","type":"topic","required":true,"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"connect","kind":"identifier"},{"text":"(","kind":"text"},{"text":"delegate","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"c:@M@NixUniversalSDK@objc(pl)DeviceStateDelegate","kind":"typeIdentifier","text":"DeviceStateDelegate"},{"kind":"text","text":")"}],"url":"\/documentation\/nixuniversalsdk\/idevicecompat\/connect(delegate:)","role":"symbol"},"doc://com.nixsensor.universalsdk/documentation/NixUniversalSDK/DeviceScanner/DEFAULT_SINGLE_DEVICE_PERIOD_MS":{"type":"topic","kind":"symbol","abstract":[{"text":"Scan period in milliseconds (10000) used when no time period is provided to ","type":"text"},{"isActive":true,"identifier":"doc:\/\/com.nixsensor.universalsdk\/documentation\/NixUniversalSDK\/IDeviceScanner\/startSearchForId(_:closure:)","type":"reference"}],"title":"DEFAULT_SINGLE_DEVICE_PERIOD_MS","identifier":"doc:\/\/com.nixsensor.universalsdk\/documentation\/NixUniversalSDK\/DeviceScanner\/DEFAULT_SINGLE_DEVICE_PERIOD_MS","role":"symbol","fragments":[{"text":"static","kind":"keyword"},{"kind":"text","text":" "},{"text":"let","kind":"keyword"},{"kind":"text","text":" "},{"text":"DEFAULT_SINGLE_DEVICE_PERIOD_MS","kind":"identifier"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Si","text":"Int","kind":"typeIdentifier"}],"url":"\/documentation\/nixuniversalsdk\/devicescanner\/default_single_device_period_ms"},"doc://com.nixsensor.universalsdk/documentation/NixUniversalSDK/DeviceStatus/ERROR_UNAUTHORIZED":{"fragments":[{"text":"case","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ERROR_UNAUTHORIZED","kind":"identifier"}],"url":"\/documentation\/nixuniversalsdk\/devicestatus\/error_unauthorized","kind":"symbol","role":"symbol","identifier":"doc:\/\/com.nixsensor.universalsdk\/documentation\/NixUniversalSDK\/DeviceStatus\/ERROR_UNAUTHORIZED","type":"topic","title":"DeviceStatus.ERROR_UNAUTHORIZED","navigatorTitle":[{"text":"DeviceStatusERROR_UNAUTHORIZED","kind":"identifier"}],"abstract":[{"type":"text","text":"The device connection attempt was cancelled because the specified device was not authorized for this build of the Nix SDK. Check that the device allocation code and\/or serial number is expected to be authorized for this build."}]},"doc://com.nixsensor.universalsdk/documentation/NixUniversalSDK/DeviceScanner":{"type":"topic","fragments":[{"kind":"keyword","text":"class"},{"text":" ","kind":"text"},{"text":"DeviceScanner","kind":"identifier"}],"abstract":[{"type":"text","text":"Class used to discover nearby Nix devices"}],"url":"\/documentation\/nixuniversalsdk\/devicescanner","kind":"symbol","role":"symbol","title":"DeviceScanner","navigatorTitle":[{"kind":"identifier","text":"DeviceScanner"}],"identifier":"doc:\/\/com.nixsensor.universalsdk\/documentation\/NixUniversalSDK\/DeviceScanner"},"doc://com.nixsensor.universalsdk/documentation/NixUniversalSDK/LicenseManager/state":{"url":"\/documentation\/nixuniversalsdk\/licensemanager\/state","type":"topic","kind":"symbol","role":"symbol","identifier":"doc:\/\/com.nixsensor.universalsdk\/documentation\/NixUniversalSDK\/LicenseManager\/state","abstract":[{"type":"text","text":"Describes the current state of the  "},{"isActive":true,"identifier":"doc:\/\/com.nixsensor.universalsdk\/documentation\/NixUniversalSDK\/LicenseManager","type":"reference"},{"type":"text","text":". Nix Universal SDK functions are available only if license is active (i.e. - the state is "},{"identifier":"doc:\/\/com.nixsensor.universalsdk\/documentation\/NixUniversalSDK\/LicenseManagerState\/ACTIVE","isActive":true,"type":"reference"},{"text":")","type":"text"}],"fragments":[{"kind":"keyword","text":"static"},{"text":" ","kind":"text"},{"text":"var","kind":"keyword"},{"kind":"text","text":" "},{"text":"state","kind":"identifier"},{"text":": ","kind":"text"},{"preciseIdentifier":"c:@M@NixUniversalSDK@E@LicenseManagerState","text":"LicenseManagerState","kind":"typeIdentifier"}],"title":"state","navigatorTitle":[{"text":"state","kind":"identifier"}]},"doc://com.nixsensor.universalsdk/documentation/NixUniversalSDK":{"url":"\/documentation\/nixuniversalsdk","abstract":[{"type":"text","text":"A library to allow integration of Nix devices into third-party iOS and macOS applications."}],"identifier":"doc:\/\/com.nixsensor.universalsdk\/documentation\/NixUniversalSDK","role":"collection","title":"NixUniversalSDK","type":"topic","kind":"symbol"},"doc://com.nixsensor.universalsdk/documentation/NixUniversalSDK/LicenseManagerState/ACTIVE":{"title":"LicenseManagerState.ACTIVE","kind":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"case"},{"kind":"text","text":" "},{"text":"ACTIVE","kind":"identifier"}],"identifier":"doc:\/\/com.nixsensor.universalsdk\/documentation\/NixUniversalSDK\/LicenseManagerState\/ACTIVE","url":"\/documentation\/nixuniversalsdk\/licensemanagerstate\/active","navigatorTitle":[{"text":"LicenseManagerStateACTIVE","kind":"identifier"}],"abstract":[{"text":"The license has activated successfully and Nix Universal SDK functions are available.","type":"text"}],"role":"symbol"},"doc://com.nixsensor.universalsdk/documentation/NixUniversalSDK/IDeviceScanner/stop()":{"navigatorTitle":[{"kind":"identifier","text":"stop"}],"abstract":[{"text":"Stops a Bluetooth search if one is currently running.","type":"text"}],"title":"stop()","type":"topic","required":true,"kind":"symbol","role":"symbol","identifier":"doc:\/\/com.nixsensor.universalsdk\/documentation\/NixUniversalSDK\/IDeviceScanner\/stop()","url":"\/documentation\/nixuniversalsdk\/idevicescanner\/stop()","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"stop","kind":"identifier"},{"kind":"text","text":"()"}]},"doc://com.nixsensor.universalsdk/documentation/NixUniversalSDK/IDeviceScanner/start(scanPeriodMs:closure:)":{"navigatorTitle":[{"kind":"identifier","text":"startForPeriodMs:withClosure:"}],"abstract":[{"type":"text","text":"Starts a search for nearby Nix devices using Bluetooth for a selected time interval. If no timeout interval is specified, the search will run for "},{"identifier":"doc:\/\/com.nixsensor.universalsdk\/documentation\/NixUniversalSDK\/DeviceScanner\/DEFAULT_GENERAL_SCAN_PERIOD_MS","type":"reference","isActive":true},{"type":"text","text":"."}],"title":"start(scanPeriodMs:closure:)","type":"topic","required":true,"kind":"symbol","role":"symbol","identifier":"doc:\/\/com.nixsensor.universalsdk\/documentation\/NixUniversalSDK\/IDeviceScanner\/start(scanPeriodMs:closure:)","url":"\/documentation\/nixuniversalsdk\/idevicescanner\/start(scanperiodms:closure:)","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"start","kind":"identifier"},{"kind":"text","text":"("},{"text":"scanPeriodMs","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"Int","preciseIdentifier":"s:Si"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"closure"},{"kind":"text","text":": "},{"text":"DeviceFoundCallback","preciseIdentifier":"s:15NixUniversalSDK19DeviceFoundCallbacka","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"DeviceScannerState","kind":"typeIdentifier","preciseIdentifier":"c:@M@NixUniversalSDK@E@DeviceScannerState"}]},"doc://com.nixsensor.universalsdk/documentation/NixUniversalSDK/add-to-xcode":{"identifier":"doc:\/\/com.nixsensor.universalsdk\/documentation\/NixUniversalSDK\/add-to-xcode","abstract":[{"type":"text","text":"Add the library bundle to your project and declare peripheral uses"}],"title":"Adding to Your Xcode Project","kind":"article","url":"\/documentation\/nixuniversalsdk\/add-to-xcode","role":"article","type":"topic"},"doc://com.nixsensor.universalsdk/documentation/NixUniversalSDK/wrapper":{"identifier":"doc:\/\/com.nixsensor.universalsdk\/documentation\/NixUniversalSDK\/wrapper","abstract":[{"text":"Review an example project which provides a C\/C++ interface on macOS","type":"text"}],"role":"article","type":"topic","kind":"article","title":"Wrapper for Usage in C\/C++","url":"\/documentation\/nixuniversalsdk\/wrapper"},"doc://com.nixsensor.universalsdk/documentation/NixUniversalSDK/LicenseManager":{"url":"\/documentation\/nixuniversalsdk\/licensemanager","title":"LicenseManager","identifier":"doc:\/\/com.nixsensor.universalsdk\/documentation\/NixUniversalSDK\/LicenseManager","navigatorTitle":[{"text":"LicenseManager","kind":"identifier"}],"abstract":[{"text":"Class used to manage the license for the Nix Universal SDK. Members of this class are not instantiated or accessed directly. Access to a single shared instance is provided via static methods and properties.","type":"text"}],"kind":"symbol","role":"symbol","type":"topic","fragments":[{"text":"class","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"LicenseManager"}]},"doc://com.nixsensor.universalsdk/documentation/NixUniversalSDK/DeviceScannerState/IDLE":{"role":"symbol","url":"\/documentation\/nixuniversalsdk\/devicescannerstate\/idle","type":"topic","identifier":"doc:\/\/com.nixsensor.universalsdk\/documentation\/NixUniversalSDK\/DeviceScannerState\/IDLE","title":"DeviceScannerState.IDLE","abstract":[{"text":"Bluetooth scanner is not actively searching for devices.","type":"text"}],"kind":"symbol","fragments":[{"kind":"keyword","text":"case"},{"text":" ","kind":"text"},{"text":"IDLE","kind":"identifier"}],"navigatorTitle":[{"kind":"identifier","text":"DeviceScannerStateIDLE"}]},"doc://com.nixsensor.universalsdk/documentation/NixUniversalSDK/IDeviceCompat/rssi":{"required":true,"abstract":[{"type":"text","text":"Signal strength for this device"}],"navigatorTitle":[{"kind":"identifier","text":"rssi"}],"kind":"symbol","fragments":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"rssi"},{"kind":"text","text":": "},{"text":"Int","kind":"typeIdentifier","preciseIdentifier":"s:Si"}],"type":"topic","identifier":"doc:\/\/com.nixsensor.universalsdk\/documentation\/NixUniversalSDK\/IDeviceCompat\/rssi","url":"\/documentation\/nixuniversalsdk\/idevicecompat\/rssi","role":"symbol","title":"rssi"},"doc://com.nixsensor.universalsdk/documentation/NixUniversalSDK/release-notes":{"abstract":[{"type":"text","text":"Review the changes made in this version of the library"}],"url":"\/documentation\/nixuniversalsdk\/release-notes","identifier":"doc:\/\/com.nixsensor.universalsdk\/documentation\/NixUniversalSDK\/release-notes","role":"article","type":"topic","kind":"article","title":"Release Notes"},"doc://com.nixsensor.universalsdk/documentation/NixUniversalSDK/activating-license":{"kind":"article","role":"article","identifier":"doc:\/\/com.nixsensor.universalsdk\/documentation\/NixUniversalSDK\/activating-license","abstract":[{"type":"text","text":"Enable Nix device functions with your license code"}],"type":"topic","title":"Activating the SDK License","url":"\/documentation\/nixuniversalsdk\/activating-license"},"doc://com.nixsensor.universalsdk/documentation/NixUniversalSDK/DeviceStateDelegate/onConnected(_:)":{"navigatorTitle":[{"text":"onConnected:","kind":"identifier"}],"required":true,"url":"\/documentation\/nixuniversalsdk\/devicestatedelegate\/onconnected(_:)","kind":"symbol","abstract":[{"type":"text","text":"Called when the Nix device has completed the connection process and is now idle."}],"role":"symbol","title":"onConnected(_:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"onConnected"},{"text":"(","kind":"text"},{"preciseIdentifier":"c:@M@NixUniversalSDK@objc(pl)IDeviceCompat","kind":"typeIdentifier","text":"IDeviceCompat"},{"text":")","kind":"text"}],"identifier":"doc:\/\/com.nixsensor.universalsdk\/documentation\/NixUniversalSDK\/DeviceStateDelegate\/onConnected(_:)","type":"topic"},"doc://com.nixsensor.universalsdk/documentation/NixUniversalSDK/IDeviceScanner":{"fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"IDeviceScanner"}],"navigatorTitle":[{"kind":"identifier","text":"IDeviceScanner"}],"kind":"symbol","url":"\/documentation\/nixuniversalsdk\/idevicescanner","role":"symbol","abstract":[{"type":"text","text":"Protocol implemented by the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.nixsensor.universalsdk\/documentation\/NixUniversalSDK\/DeviceScanner"}],"type":"topic","identifier":"doc:\/\/com.nixsensor.universalsdk\/documentation\/NixUniversalSDK\/IDeviceScanner","title":"IDeviceScanner"},"doc://com.nixsensor.universalsdk/documentation/NixUniversalSDK/ScannerStateDelegate/onScannerInit(_:state:)":{"identifier":"doc:\/\/com.nixsensor.universalsdk\/documentation\/NixUniversalSDK\/ScannerStateDelegate\/onScannerInit(_:state:)","type":"topic","required":true,"role":"symbol","url":"\/documentation\/nixuniversalsdk\/scannerstatedelegate\/onscannerinit(_:state:)","abstract":[{"text":"Called when the ","type":"text"},{"type":"codeVoice","code":"IDeviceScanner"},{"text":" has initialized. Check ","type":"text"},{"type":"codeVoice","code":"state"},{"type":"text","text":" to determine success or failure code."}],"title":"onScannerInit(_:state:)","kind":"symbol","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"onScannerInit"},{"text":"(","kind":"text"},{"text":"IDeviceScanner","kind":"typeIdentifier","preciseIdentifier":"c:@M@NixUniversalSDK@objc(pl)IDeviceScanner"},{"kind":"text","text":", "},{"text":"state","kind":"externalParam"},{"kind":"text","text":": "},{"preciseIdentifier":"c:@M@NixUniversalSDK@E@DeviceScannerState","kind":"typeIdentifier","text":"DeviceScannerState"},{"text":")","kind":"text"}],"navigatorTitle":[{"kind":"identifier","text":"onScannerInit:state:"}]},"doc://com.nixsensor.universalsdk/documentation/NixUniversalSDK/ScannerStateDelegate/onScannerStopped(_:)":{"required":true,"identifier":"doc:\/\/com.nixsensor.universalsdk\/documentation\/NixUniversalSDK\/ScannerStateDelegate\/onScannerStopped(_:)","kind":"symbol","role":"symbol","title":"onScannerStopped(_:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"onScannerStopped","kind":"identifier"},{"text":"(","kind":"text"},{"preciseIdentifier":"c:@M@NixUniversalSDK@objc(pl)IDeviceScanner","kind":"typeIdentifier","text":"IDeviceScanner"},{"text":")","kind":"text"}],"navigatorTitle":[{"kind":"identifier","text":"onScannerStopped:"}],"url":"\/documentation\/nixuniversalsdk\/scannerstatedelegate\/onscannerstopped(_:)","abstract":[{"type":"text","text":"Called when an "},{"type":"codeVoice","code":"IDeviceScanner"},{"text":" has stopped searching","type":"text"}],"type":"topic"},"doc://com.nixsensor.universalsdk/documentation/NixUniversalSDK/handling-measurements":{"identifier":"doc:\/\/com.nixsensor.universalsdk\/documentation\/NixUniversalSDK\/handling-measurements","abstract":[{"type":"text","text":"Query measurement values including colorimetry, spectral reflectance, and density"}],"role":"article","type":"topic","kind":"article","title":"Handling Measurement Data","url":"\/documentation\/nixuniversalsdk\/handling-measurements"},"doc://com.nixsensor.universalsdk/documentation/NixUniversalSDK/DeviceStateDelegate/onDisconnected(_:status:)":{"url":"\/documentation\/nixuniversalsdk\/devicestatedelegate\/ondisconnected(_:status:)","type":"topic","identifier":"doc:\/\/com.nixsensor.universalsdk\/documentation\/NixUniversalSDK\/DeviceStateDelegate\/onDisconnected(_:status:)","kind":"symbol","required":true,"abstract":[{"type":"text","text":"Called when the Nix device has disconnected from the host."}],"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"onDisconnected","kind":"identifier"},{"text":"(","kind":"text"},{"kind":"typeIdentifier","text":"IDeviceCompat","preciseIdentifier":"c:@M@NixUniversalSDK@objc(pl)IDeviceCompat"},{"kind":"text","text":", "},{"text":"status","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"c:@M@NixUniversalSDK@E@DeviceStatus","text":"DeviceStatus","kind":"typeIdentifier"},{"text":")","kind":"text"}],"role":"symbol","navigatorTitle":[{"text":"onDisconnected:status:","kind":"identifier"}],"title":"onDisconnected(_:status:)"},"doc://com.nixsensor.universalsdk/documentation/NixUniversalSDK/DeviceScanner/DEFAULT_GENERAL_SCAN_PERIOD_MS":{"abstract":[{"type":"text","text":"Scan period in milliseconds (20000) used when no time period is provided to "},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.nixsensor.universalsdk\/documentation\/NixUniversalSDK\/IDeviceScanner\/start(scanPeriodMs:closure:)"}],"title":"DEFAULT_GENERAL_SCAN_PERIOD_MS","type":"topic","kind":"symbol","role":"symbol","identifier":"doc:\/\/com.nixsensor.universalsdk\/documentation\/NixUniversalSDK\/DeviceScanner\/DEFAULT_GENERAL_SCAN_PERIOD_MS","url":"\/documentation\/nixuniversalsdk\/devicescanner\/default_general_scan_period_ms","fragments":[{"kind":"keyword","text":"static"},{"text":" ","kind":"text"},{"text":"let","kind":"keyword"},{"kind":"text","text":" "},{"text":"DEFAULT_GENERAL_SCAN_PERIOD_MS","kind":"identifier"},{"kind":"text","text":": "},{"text":"Int","preciseIdentifier":"s:Si","kind":"typeIdentifier"}]},"doc://com.nixsensor.universalsdk/documentation/NixUniversalSDK/DeviceStateDelegate":{"url":"\/documentation\/nixuniversalsdk\/devicestatedelegate","type":"topic","role":"symbol","title":"DeviceStateDelegate","kind":"symbol","identifier":"doc:\/\/com.nixsensor.universalsdk\/documentation\/NixUniversalSDK\/DeviceStateDelegate","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"DeviceStateDelegate"}],"navigatorTitle":[{"text":"DeviceStateDelegate","kind":"identifier"}],"abstract":[{"type":"text","text":"Definition for a callback from an "},{"identifier":"doc:\/\/com.nixsensor.universalsdk\/documentation\/NixUniversalSDK\/IDeviceCompat","isActive":true,"type":"reference"},{"type":"text","text":" instance on a connection state change, battery state change, or external power state change."}]}},"variantOverrides":[{"traits":[{"interfaceLanguage":"occ"}],"patch":[{"path":"\/identifier\/interfaceLanguage","op":"replace","value":"occ"},{"path":"\/topicSections","value":null,"op":"add"},{"op":"replace","value":[{"title":"Getting Started","identifiers":["doc:\/\/com.nixsensor.universalsdk\/documentation\/NixUniversalSDK\/release-notes","doc:\/\/com.nixsensor.universalsdk\/documentation\/NixUniversalSDK\/add-to-xcode","doc:\/\/com.nixsensor.universalsdk\/documentation\/NixUniversalSDK\/activating-license","doc:\/\/com.nixsensor.universalsdk\/documentation\/NixUniversalSDK\/device-operations","doc:\/\/com.nixsensor.universalsdk\/documentation\/NixUniversalSDK\/handling-measurements","doc:\/\/com.nixsensor.universalsdk\/documentation\/NixUniversalSDK\/example-apps","doc:\/\/com.nixsensor.universalsdk\/documentation\/NixUniversalSDK\/wrapper"],"generated":true,"anchor":"Getting-Started"}],"path":"\/seeAlsoSections"},{"op":"replace","path":"\/references\/doc:~1~1com.nixsensor.universalsdk~1documentation~1NixUniversalSDK~1IDeviceCompat~1id\/title","value":"id"},{"value":[{"text":"id","kind":"identifier"}],"path":"\/references\/doc:~1~1com.nixsensor.universalsdk~1documentation~1NixUniversalSDK~1IDeviceCompat~1id\/fragments","op":"replace"},{"op":"replace","path":"\/references\/doc:~1~1com.nixsensor.universalsdk~1documentation~1NixUniversalSDK~1IDeviceCompat~1disconnect()\/title","value":"disconnect"},{"path":"\/references\/doc:~1~1com.nixsensor.universalsdk~1documentation~1NixUniversalSDK~1IDeviceCompat~1disconnect()\/fragments","op":"replace","value":[{"text":"- ","kind":"text"},{"text":"disconnect","kind":"identifier"}]},{"value":"startSearchForId:withClosure:","op":"replace","path":"\/references\/doc:~1~1com.nixsensor.universalsdk~1documentation~1NixUniversalSDK~1IDeviceScanner~1startSearchForId(_:closure:)\/title"},{"path":"\/references\/doc:~1~1com.nixsensor.universalsdk~1documentation~1NixUniversalSDK~1IDeviceScanner~1startSearchForId(_:closure:)\/fragments","op":"replace","value":[{"kind":"text","text":"- "},{"kind":"identifier","text":"startSearchForId:withClosure:"}]},{"op":"replace","path":"\/references\/doc:~1~1com.nixsensor.universalsdk~1documentation~1NixUniversalSDK~1IDeviceCompat\/title","value":"IDeviceCompat"},{"value":[{"text":"IDeviceCompat","kind":"identifier"}],"path":"\/references\/doc:~1~1com.nixsensor.universalsdk~1documentation~1NixUniversalSDK~1IDeviceCompat\/fragments","op":"replace"},{"op":"replace","path":"\/references\/doc:~1~1com.nixsensor.universalsdk~1documentation~1NixUniversalSDK~1IDeviceCompat\/navigatorTitle","value":[{"text":"IDeviceCompat","kind":"identifier"}]},{"op":"replace","path":"\/references\/doc:~1~1com.nixsensor.universalsdk~1documentation~1NixUniversalSDK~1IDeviceCompat~1type\/title","value":"type"},{"path":"\/references\/doc:~1~1com.nixsensor.universalsdk~1documentation~1NixUniversalSDK~1IDeviceCompat~1type\/fragments","value":[{"kind":"identifier","text":"type"}],"op":"replace"},{"path":"\/references\/doc:~1~1com.nixsensor.universalsdk~1documentation~1NixUniversalSDK~1IDeviceCompat~1name\/title","value":"name","op":"replace"},{"path":"\/references\/doc:~1~1com.nixsensor.universalsdk~1documentation~1NixUniversalSDK~1IDeviceCompat~1name\/fragments","value":[{"text":"name","kind":"identifier"}],"op":"replace"},{"op":"replace","path":"\/references\/doc:~1~1com.nixsensor.universalsdk~1documentation~1NixUniversalSDK~1DeviceScannerState~1ERROR_LICENSE\/title","value":"DeviceScannerStateERROR_LICENSE"},{"op":"replace","path":"\/references\/doc:~1~1com.nixsensor.universalsdk~1documentation~1NixUniversalSDK~1DeviceScannerState~1ERROR_LICENSE\/fragments","value":[{"kind":"identifier","text":"DeviceScannerStateERROR_LICENSE"}]},{"op":"replace","path":"\/references\/doc:~1~1com.nixsensor.universalsdk~1documentation~1NixUniversalSDK~1ScannerStateDelegate\/title","value":"ScannerStateDelegate"},{"op":"replace","value":[{"text":"ScannerStateDelegate","kind":"identifier"}],"path":"\/references\/doc:~1~1com.nixsensor.universalsdk~1documentation~1NixUniversalSDK~1ScannerStateDelegate\/fragments"},{"path":"\/references\/doc:~1~1com.nixsensor.universalsdk~1documentation~1NixUniversalSDK~1ScannerStateDelegate\/navigatorTitle","value":[{"kind":"identifier","text":"ScannerStateDelegate"}],"op":"replace"},{"op":"replace","value":"interfaceType","path":"\/references\/doc:~1~1com.nixsensor.universalsdk~1documentation~1NixUniversalSDK~1IDeviceCompat~1interfaceType\/title"},{"path":"\/references\/doc:~1~1com.nixsensor.universalsdk~1documentation~1NixUniversalSDK~1IDeviceCompat~1interfaceType\/fragments","op":"replace","value":[{"text":"interfaceType","kind":"identifier"}]},{"op":"replace","value":"connect:","path":"\/references\/doc:~1~1com.nixsensor.universalsdk~1documentation~1NixUniversalSDK~1IDeviceCompat~1connect(delegate:)\/title"},{"path":"\/references\/doc:~1~1com.nixsensor.universalsdk~1documentation~1NixUniversalSDK~1IDeviceCompat~1connect(delegate:)\/fragments","value":[{"kind":"text","text":"- "},{"text":"connect:","kind":"identifier"}],"op":"replace"},{"op":"replace","value":"DeviceStatusERROR_UNAUTHORIZED","path":"\/references\/doc:~1~1com.nixsensor.universalsdk~1documentation~1NixUniversalSDK~1DeviceStatus~1ERROR_UNAUTHORIZED\/title"},{"op":"replace","value":[{"text":"DeviceStatusERROR_UNAUTHORIZED","kind":"identifier"}],"path":"\/references\/doc:~1~1com.nixsensor.universalsdk~1documentation~1NixUniversalSDK~1DeviceStatus~1ERROR_UNAUTHORIZED\/fragments"},{"path":"\/references\/doc:~1~1com.nixsensor.universalsdk~1documentation~1NixUniversalSDK~1DeviceScanner\/title","value":"DeviceScanner","op":"replace"},{"op":"replace","value":[{"kind":"identifier","text":"DeviceScanner"}],"path":"\/references\/doc:~1~1com.nixsensor.universalsdk~1documentation~1NixUniversalSDK~1DeviceScanner\/fragments"},{"path":"\/references\/doc:~1~1com.nixsensor.universalsdk~1documentation~1NixUniversalSDK~1DeviceScanner\/navigatorTitle","op":"replace","value":[{"text":"DeviceScanner","kind":"identifier"}]},{"path":"\/references\/doc:~1~1com.nixsensor.universalsdk~1documentation~1NixUniversalSDK~1LicenseManager~1state\/title","value":"state","op":"replace"},{"value":[{"text":"state","kind":"identifier"}],"op":"replace","path":"\/references\/doc:~1~1com.nixsensor.universalsdk~1documentation~1NixUniversalSDK~1LicenseManager~1state\/fragments"},{"op":"replace","value":"LicenseManagerStateACTIVE","path":"\/references\/doc:~1~1com.nixsensor.universalsdk~1documentation~1NixUniversalSDK~1LicenseManagerState~1ACTIVE\/title"},{"op":"replace","path":"\/references\/doc:~1~1com.nixsensor.universalsdk~1documentation~1NixUniversalSDK~1LicenseManagerState~1ACTIVE\/fragments","value":[{"text":"LicenseManagerStateACTIVE","kind":"identifier"}]},{"op":"replace","path":"\/references\/doc:~1~1com.nixsensor.universalsdk~1documentation~1NixUniversalSDK~1IDeviceScanner~1stop()\/title","value":"stop"},{"op":"replace","path":"\/references\/doc:~1~1com.nixsensor.universalsdk~1documentation~1NixUniversalSDK~1IDeviceScanner~1stop()\/fragments","value":[{"text":"- ","kind":"text"},{"text":"stop","kind":"identifier"}]},{"path":"\/references\/doc:~1~1com.nixsensor.universalsdk~1documentation~1NixUniversalSDK~1IDeviceScanner~1start(scanPeriodMs:closure:)\/title","value":"startForPeriodMs:withClosure:","op":"replace"},{"path":"\/references\/doc:~1~1com.nixsensor.universalsdk~1documentation~1NixUniversalSDK~1IDeviceScanner~1start(scanPeriodMs:closure:)\/fragments","value":[{"kind":"text","text":"- "},{"text":"startForPeriodMs:withClosure:","kind":"identifier"}],"op":"replace"},{"op":"replace","value":"LicenseManager","path":"\/references\/doc:~1~1com.nixsensor.universalsdk~1documentation~1NixUniversalSDK~1LicenseManager\/title"},{"path":"\/references\/doc:~1~1com.nixsensor.universalsdk~1documentation~1NixUniversalSDK~1LicenseManager\/fragments","value":[{"kind":"identifier","text":"LicenseManager"}],"op":"replace"},{"value":[{"text":"LicenseManager","kind":"identifier"}],"op":"replace","path":"\/references\/doc:~1~1com.nixsensor.universalsdk~1documentation~1NixUniversalSDK~1LicenseManager\/navigatorTitle"},{"path":"\/references\/doc:~1~1com.nixsensor.universalsdk~1documentation~1NixUniversalSDK~1DeviceScannerState~1IDLE\/title","value":"DeviceScannerStateIDLE","op":"replace"},{"path":"\/references\/doc:~1~1com.nixsensor.universalsdk~1documentation~1NixUniversalSDK~1DeviceScannerState~1IDLE\/fragments","value":[{"text":"DeviceScannerStateIDLE","kind":"identifier"}],"op":"replace"},{"op":"replace","path":"\/references\/doc:~1~1com.nixsensor.universalsdk~1documentation~1NixUniversalSDK~1IDeviceCompat~1rssi\/title","value":"rssi"},{"op":"replace","value":[{"text":"rssi","kind":"identifier"}],"path":"\/references\/doc:~1~1com.nixsensor.universalsdk~1documentation~1NixUniversalSDK~1IDeviceCompat~1rssi\/fragments"},{"path":"\/references\/doc:~1~1com.nixsensor.universalsdk~1documentation~1NixUniversalSDK~1DeviceStateDelegate~1onConnected(_:)\/title","value":"onConnected:","op":"replace"},{"path":"\/references\/doc:~1~1com.nixsensor.universalsdk~1documentation~1NixUniversalSDK~1DeviceStateDelegate~1onConnected(_:)\/fragments","op":"replace","value":[{"kind":"text","text":"- "},{"kind":"identifier","text":"onConnected:"}]},{"op":"replace","path":"\/references\/doc:~1~1com.nixsensor.universalsdk~1documentation~1NixUniversalSDK~1IDeviceScanner\/title","value":"IDeviceScanner"},{"value":[{"text":"IDeviceScanner","kind":"identifier"}],"op":"replace","path":"\/references\/doc:~1~1com.nixsensor.universalsdk~1documentation~1NixUniversalSDK~1IDeviceScanner\/fragments"},{"path":"\/references\/doc:~1~1com.nixsensor.universalsdk~1documentation~1NixUniversalSDK~1IDeviceScanner\/navigatorTitle","value":[{"kind":"identifier","text":"IDeviceScanner"}],"op":"replace"},{"value":"onScannerInit:state:","op":"replace","path":"\/references\/doc:~1~1com.nixsensor.universalsdk~1documentation~1NixUniversalSDK~1ScannerStateDelegate~1onScannerInit(_:state:)\/title"},{"value":[{"text":"- ","kind":"text"},{"text":"onScannerInit:state:","kind":"identifier"}],"op":"replace","path":"\/references\/doc:~1~1com.nixsensor.universalsdk~1documentation~1NixUniversalSDK~1ScannerStateDelegate~1onScannerInit(_:state:)\/fragments"},{"op":"replace","value":"onScannerStopped:","path":"\/references\/doc:~1~1com.nixsensor.universalsdk~1documentation~1NixUniversalSDK~1ScannerStateDelegate~1onScannerStopped(_:)\/title"},{"path":"\/references\/doc:~1~1com.nixsensor.universalsdk~1documentation~1NixUniversalSDK~1ScannerStateDelegate~1onScannerStopped(_:)\/fragments","value":[{"kind":"text","text":"- "},{"text":"onScannerStopped:","kind":"identifier"}],"op":"replace"},{"path":"\/references\/doc:~1~1com.nixsensor.universalsdk~1documentation~1NixUniversalSDK~1DeviceStateDelegate~1onDisconnected(_:status:)\/title","value":"onDisconnected:status:","op":"replace"},{"path":"\/references\/doc:~1~1com.nixsensor.universalsdk~1documentation~1NixUniversalSDK~1DeviceStateDelegate~1onDisconnected(_:status:)\/fragments","value":[{"kind":"text","text":"- "},{"text":"onDisconnected:status:","kind":"identifier"}],"op":"replace"},{"value":"DeviceStateDelegate","op":"replace","path":"\/references\/doc:~1~1com.nixsensor.universalsdk~1documentation~1NixUniversalSDK~1DeviceStateDelegate\/title"},{"path":"\/references\/doc:~1~1com.nixsensor.universalsdk~1documentation~1NixUniversalSDK~1DeviceStateDelegate\/fragments","op":"replace","value":[{"text":"DeviceStateDelegate","kind":"identifier"}]},{"value":[{"text":"DeviceStateDelegate","kind":"identifier"}],"op":"replace","path":"\/references\/doc:~1~1com.nixsensor.universalsdk~1documentation~1NixUniversalSDK~1DeviceStateDelegate\/navigatorTitle"}]}]}