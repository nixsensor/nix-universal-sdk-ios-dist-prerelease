{"schemaVersion":{"major":0,"minor":3,"patch":0},"kind":"article","sections":[],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.nixsensor.universalsdk\/documentation\/NixUniversalSDK\/discovering-connecting"},"primaryContentSections":[{"content":[{"text":"Overview","level":2,"anchor":"Overview","type":"heading"},{"type":"paragraph","inlineContent":[{"text":"Regardless of device type, each unique Nix device can be represented by an object that conforms to the ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.nixsensor.universalsdk\/documentation\/NixUniversalSDK\/IDeviceCompat"},{"text":" protocol. To obtain instances of the device object, they need to first be discovered using the ","type":"text"},{"identifier":"doc:\/\/com.nixsensor.universalsdk\/documentation\/NixUniversalSDK\/DeviceScanner","type":"reference","isActive":true},{"type":"text","text":". They can also be recalled at a later time directly using their "},{"identifier":"doc:\/\/com.nixsensor.universalsdk\/documentation\/NixUniversalSDK\/IDeviceCompat\/id","isActive":true,"type":"reference"},{"text":" property (for Bluetooth connected devices only).","type":"text"}]},{"level":3,"text":"Device Discovery","anchor":"Device-Discovery","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.nixsensor.universalsdk\/documentation\/NixUniversalSDK\/DeviceScanner"},{"text":" implements the ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.nixsensor.universalsdk\/documentation\/NixUniversalSDK\/IDeviceScanner"},{"type":"text","text":" protocol and searches for nearby Nix devices using Bluetooth. On macOS, the "},{"type":"reference","identifier":"doc:\/\/com.nixsensor.universalsdk\/documentation\/NixUniversalSDK\/DeviceScanner","isActive":true},{"type":"text","text":" will also report devices connected via USB. Scanner events are reported via:"}]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","identifier":"doc:\/\/com.nixsensor.universalsdk\/documentation\/NixUniversalSDK\/ScannerStateDelegate","isActive":true},{"type":"text","text":":"}]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"Delegate which must be specified when initializing the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.nixsensor.universalsdk\/documentation\/NixUniversalSDK\/DeviceScanner"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Reports when the scanner initializes, starts, and stops searching for devices"}],"type":"paragraph"}]}]}]},{"content":[{"inlineContent":[{"identifier":"doc:\/\/com.nixsensor.universalsdk\/documentation\/NixUniversalSDK\/DeviceFoundCallback","isActive":true,"type":"reference"},{"type":"text","text":":"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"text":"Closure which is called by the scanner each time that an ","type":"text"},{"identifier":"doc:\/\/com.nixsensor.universalsdk\/documentation\/NixUniversalSDK\/IDeviceCompat","type":"reference","isActive":true},{"text":" instance has been found","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Note that this will be called both when a new device is found and when the RSSI\/signal strength of a previously discovered device has changed.","type":"text"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"text":"It is possible to use the ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.nixsensor.universalsdk\/documentation\/NixUniversalSDK\/IDeviceCompat\/id"},{"type":"text","text":" parameter as a means to uniquely identify discovered devices."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Do not hold reference to stale "},{"identifier":"doc:\/\/com.nixsensor.universalsdk\/documentation\/NixUniversalSDK\/IDeviceCompat","isActive":true,"type":"reference"},{"text":" instances; use the most recently reported device instance when connecting to a device later.","type":"text"}]}]}]}]}]}]}],"type":"unorderedList"},{"content":[{"inlineContent":[{"type":"text","text":"Devices can only be discovered or recalled while your SDK licence is in an "},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.nixsensor.universalsdk\/documentation\/NixUniversalSDK\/LicenseManagerState\/ACTIVE"},{"type":"text","text":" state; the current value is available via "},{"type":"reference","identifier":"doc:\/\/com.nixsensor.universalsdk\/documentation\/NixUniversalSDK\/LicenseManager\/state","isActive":true},{"text":". Only device types supported by your license can be discovered and connected; the current list of allowed types is available via ","type":"text"},{"type":"reference","identifier":"doc:\/\/com.nixsensor.universalsdk\/documentation\/NixUniversalSDK\/LicenseManager\/allowedDeviceTypes-4f98s","isActive":true},{"text":".","type":"text"}],"type":"paragraph"}],"type":"aside","name":"Note","style":"note"},{"inlineContent":[{"type":"text","text":"To use the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.nixsensor.universalsdk\/documentation\/NixUniversalSDK\/DeviceScanner"},{"type":"text","text":":"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Initialize the scanner and check its state in ","type":"text"},{"identifier":"doc:\/\/com.nixsensor.universalsdk\/documentation\/NixUniversalSDK\/ScannerStateDelegate\/onScannerInit(_:state:)","type":"reference","isActive":true}]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"text":"After a successful initialization, the state will be ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.nixsensor.universalsdk\/documentation\/NixUniversalSDK\/DeviceScannerState\/IDLE"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"If the state is "},{"isActive":true,"identifier":"doc:\/\/com.nixsensor.universalsdk\/documentation\/NixUniversalSDK\/DeviceScannerState\/ERROR_LICENSE","type":"reference"},{"type":"text","text":", check "},{"identifier":"doc:\/\/com.nixsensor.universalsdk\/documentation\/NixUniversalSDK\/LicenseManager\/state","type":"reference","isActive":true},{"text":" for further details.","type":"text"}],"type":"paragraph"}]}]}]},{"content":[{"inlineContent":[{"type":"text","text":"If the scanner has initialized successfully, the scanner can be started using "},{"identifier":"doc:\/\/com.nixsensor.universalsdk\/documentation\/NixUniversalSDK\/IDeviceScanner\/start(scanPeriodMs:closure:)","type":"reference","isActive":true}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"By default, the scanner will search for a period "},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.nixsensor.universalsdk\/documentation\/NixUniversalSDK\/DeviceScanner\/DEFAULT_GENERAL_SCAN_PERIOD_MS"},{"text":", but this interval can be overridden by providing an argument for ","type":"text"},{"code":"scanPeriodMs","type":"codeVoice"},{"type":"text","text":"."}]}]}]}]},{"content":[{"inlineContent":[{"text":"Discovered devices will be reported via a ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.nixsensor.universalsdk\/documentation\/NixUniversalSDK\/DeviceFoundCallback"},{"text":" closure. At this stage, it is valid to check a limited number of parameters:","type":"text"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"isActive":true,"identifier":"doc:\/\/com.nixsensor.universalsdk\/documentation\/NixUniversalSDK\/IDeviceCompat\/id","type":"reference"},{"type":"text","text":": Device identifier string"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"isActive":true,"type":"reference","identifier":"doc:\/\/com.nixsensor.universalsdk\/documentation\/NixUniversalSDK\/IDeviceCompat\/rssi"},{"text":": Device signal strength (-127 to 0). Will be 0 for USB connected devices","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"identifier":"doc:\/\/com.nixsensor.universalsdk\/documentation\/NixUniversalSDK\/IDeviceCompat\/interfaceType","type":"reference","isActive":true},{"type":"text","text":": Indicates whether the device was found via Bluetooth or USB connection"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"isActive":true,"type":"reference","identifier":"doc:\/\/com.nixsensor.universalsdk\/documentation\/NixUniversalSDK\/IDeviceCompat\/type"},{"text":": Indicates the specific device type","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","identifier":"doc:\/\/com.nixsensor.universalsdk\/documentation\/NixUniversalSDK\/IDeviceCompat\/name","isActive":true},{"text":": Full name of the device (e.g. ‘Nix Spectro 2’)","type":"text"}]}]}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The device search will run for the specified duration, after which "},{"identifier":"doc:\/\/com.nixsensor.universalsdk\/documentation\/NixUniversalSDK\/ScannerStateDelegate\/onScannerStopped(_:)","isActive":true,"type":"reference"},{"type":"text","text":" is called. The device search can also be manually stopped using "},{"identifier":"doc:\/\/com.nixsensor.universalsdk\/documentation\/NixUniversalSDK\/IDeviceScanner\/stop()","type":"reference","isActive":true},{"text":".","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"To recall a specific Bluetooth connected device in a later app session, you can use "},{"identifier":"doc:\/\/com.nixsensor.universalsdk\/documentation\/NixUniversalSDK\/IDeviceScanner\/startSearchForId(_:closure:)","isActive":true,"type":"reference"},{"type":"text","text":". This will run the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.nixsensor.universalsdk\/documentation\/NixUniversalSDK\/DeviceScanner"},{"text":" searching for a specific device by its identifier, calling back only once when the device is first found.","type":"text"}]}]}]},{"anchor":"Swift-example","level":4,"text":"Swift example","type":"heading"},{"syntax":"swift","type":"codeListing","code":["import UIKit","import NixUniversalSDK","","class MyViewController: UIViewController, ScannerStateDelegate {","    var scanner: IDeviceScanner? = nil","","    override func viewDidLoad() {","        super.viewDidLoad()","","        \/\/ Do any additional setup after loading the view.","        \/\/ Your existing code here ...","        ","        \/\/ Initialize DeviceScanner","        scanner = DeviceScanner(delegate: self)","    }","","    \/\/ MARK: ScannerStateDelegate","    func onScannerInit(","        _ sender: NixUniversalSDK.IDeviceScanner, ","        state: DeviceScannerState","    ) {        ","        \/\/ Scanner has initialized","        switch state {","        case .IDLE:","            \/\/ Successful initialization","            \/\/ Can start a search now ...","            break","        case .ERROR_LICENSE:","            \/\/ There is an issue with the LicenseManager","            \/\/ Check LicenseManager.state ...","            break","        case .ERROR_BLUETOOTH_PERMISSIONS:","            \/\/ User has denied access to Bluetooth","            \/\/ Handle error ...","            break","        case .ERROR_BLUETOOTH_DISABLED, .ERROR_BLUETOOTH_UNAVAILABLE:","            \/\/ Bluetooth is disabled or not available","            \/\/ Handle error...        ","            break","        default:","            \/\/ Other error ...","            break","        }","    }","","    func onScannerStarted(","        _ sender: NixUniversalSDK.IDeviceScanner","    ) {","        \/\/ Scanner has started","        \/\/ ...","    }","","    func onScannerStopped(","        _ sender: NixUniversalSDK.IDeviceScanner","    ) {","        \/\/ Scanner has stopped","        \/\/ ...","    }","","    \/\/ MARK: DeviceScanner","    func startSearch {","        \/\/ Define callback to be invoked when devices are found","        let callback: DeviceFoundCallback = { device in","            if let device {","                \/\/ Nearby device found","                \/\/ Handle discovery here ...","","                \/\/ Valid to query some parameters now:","                print(\"Found \\(device.name) with id \\(device.id) at RSSI \\(device.rssi)\")","            }","        }","","        \/\/ Start the scanner if it is non-null","        let newState: DeviceScannerState =","            scanner?.start(closure: callback) ?? .COLD","    }","}"]},{"anchor":"Objective-C-example","level":4,"type":"heading","text":"Objective-C example"},{"code":["#import \"MyViewController.h\"","#import <NixUniversalSDK\/universalsdk.h>","","@interface MyViewController () <ScannerStateDelegate>","","@property (nonatomic, strong) DeviceScannerNullable scanner;","","@end","","@implementation MyViewController","","#pragma mark UIViewController","- (void)viewDidLoad {","    [super viewDidLoad];","    \/\/ Do any additional setup after loading the view.","    ","    \/\/ Initialize DeviceScanner","    self.scanner = [[DeviceScanner alloc] initWithDelegate:self];","}","","#pragma mark ScannerStateDelegate","- (void)onScannerInit:(DeviceScannerNonnull)sender","                state:(enum DeviceScannerState)state {","    \/\/ Scanner has initialized","    switch (state) {","        case DeviceScannerStateIDLE:","            \/\/ Successful initialization","            \/\/ Can start a search now...","            break;","        case DeviceScannerStateERROR_LICENSE:","            \/\/ There is an issue with the LicenseManager","            \/\/ Check LicenseManager.state ...","        case DeviceScannerStateERROR_BLUETOOTH_PERMISSIONS:","            \/\/ User has denied access to Bluetooth","            \/\/ Handle error ...","            break;","        case DeviceScannerStateERROR_BLUETOOTH_DISABLED:","        case DeviceScannerStateERROR_BLUETOOTH_UNAVAILABLE:","            \/\/ Bluetooth is disabled or not available","            \/\/ Handle error...","            break;","        default:","            \/\/ Other error ...","            break;","    }","}","","- (void)onScannerStarted:(DeviceScannerNonnull)sender {","    \/\/ Scanner has started","    \/\/ ...","}","","- (void)onScannerStopped:(DeviceScannerNonnull)sender {","    \/\/ Scanner has stopped","    \/\/ ...","}","","#pragma mark DeviceScanner","- (void) startSearch {","    \/\/ Define closure to be called when devices are found","    DeviceCompatBlock closure = ^(DeviceCompatNullable device) {","        if (device != nil) {","            \/\/ Nearby device found","            \/\/ Handle discovery here ...","            ","            \/\/ Valid to query some parameters now:","            NSLog(@\"Found %@ with id %@ at RSSI %d\",","                  device.name,","                  device.id,","                  (int)device.rssi);","        }","    };","    ","    \/\/ Start the search","    enum DeviceScannerState newState = DeviceScannerStateCOLD;","    if (self.scanner != nil) {","        newState = [self.scanner startWithClosure:closure];","    }","}","@end"],"type":"codeListing","syntax":"objc"},{"type":"heading","anchor":"Opening-a-connection","text":"Opening a connection","level":3},{"inlineContent":[{"type":"text","text":"Once an "},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.nixsensor.universalsdk\/documentation\/NixUniversalSDK\/IDeviceCompat"},{"type":"text","text":" instance has been obtained, a connection can be opened by calling "},{"type":"reference","identifier":"doc:\/\/com.nixsensor.universalsdk\/documentation\/NixUniversalSDK\/IDeviceCompat\/connect(delegate:)","isActive":true},{"text":". Connection state changes are provided via a ","type":"text"},{"type":"reference","identifier":"doc:\/\/com.nixsensor.universalsdk\/documentation\/NixUniversalSDK\/DeviceStateDelegate","isActive":true},{"text":".","type":"text"}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Implement the "},{"isActive":true,"identifier":"doc:\/\/com.nixsensor.universalsdk\/documentation\/NixUniversalSDK\/DeviceStateDelegate","type":"reference"},{"type":"text","text":" protocol in your class"}]}]},{"content":[{"inlineContent":[{"text":"Stop the ","type":"text"},{"identifier":"doc:\/\/com.nixsensor.universalsdk\/documentation\/NixUniversalSDK\/DeviceScanner","isActive":true,"type":"reference"},{"type":"text","text":" before opening a connection, if still running."}],"type":"paragraph"},{"items":[{"content":[{"inlineContent":[{"type":"text","text":"It is safe to call "},{"identifier":"doc:\/\/com.nixsensor.universalsdk\/documentation\/NixUniversalSDK\/IDeviceScanner\/stop()","type":"reference","isActive":true},{"type":"text","text":" at any time, even if already stopped"}],"type":"paragraph"}]}],"type":"unorderedList"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Start the connection process using "},{"identifier":"doc:\/\/com.nixsensor.universalsdk\/documentation\/NixUniversalSDK\/IDeviceCompat\/connect(delegate:)","isActive":true,"type":"reference"}]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The connection process is asynchronous and "},{"isActive":true,"identifier":"doc:\/\/com.nixsensor.universalsdk\/documentation\/NixUniversalSDK\/IDeviceCompat\/connect(delegate:)","type":"reference"},{"type":"text","text":" will return immediately. If a connection activity indicator is shown, it can be shown immediately before calling this method."}]}]},{"content":[{"inlineContent":[{"text":"A call to ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.nixsensor.universalsdk\/documentation\/NixUniversalSDK\/IDeviceCompat\/connect(delegate:)"},{"type":"text","text":" will always result in either the "},{"isActive":true,"identifier":"doc:\/\/com.nixsensor.universalsdk\/documentation\/NixUniversalSDK\/DeviceStateDelegate\/onConnected(_:)","type":"reference"},{"type":"text","text":" or "},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.nixsensor.universalsdk\/documentation\/NixUniversalSDK\/DeviceStateDelegate\/onDisconnected(_:status:)"},{"type":"text","text":" event being triggered."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Device operations are not possible until the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.nixsensor.universalsdk\/documentation\/NixUniversalSDK\/DeviceStateDelegate\/onConnected(_:)"},{"text":" callback is received (successful connection)","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"If the connection process fails, "},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.nixsensor.universalsdk\/documentation\/NixUniversalSDK\/DeviceStateDelegate\/onDisconnected(_:status:)"},{"text":" will be called with an appropriate status code indicating the cause of the error.","type":"text"}]}]},{"content":[{"inlineContent":[{"isActive":true,"identifier":"doc:\/\/com.nixsensor.universalsdk\/documentation\/NixUniversalSDK\/DeviceStateDelegate\/onDisconnected(_:status:)","type":"reference"},{"text":" will also be called later whenever the device is disconnected. This can occur normally (i.e. - if the host device calls ","type":"text"},{"identifier":"doc:\/\/com.nixsensor.universalsdk\/documentation\/NixUniversalSDK\/IDeviceCompat\/disconnect()","type":"reference","isActive":true},{"type":"text","text":"), or abnormally (i.e. - if the connection is dropped due to an error or low Bluetooth signal strength)."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Your license is linked to a specific allocation of Nix devices and will not operate with devices from another allocation."}]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"At connection time, the SDK will read an allocation code stored on the Nix device and compare to the license information."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"If this check does not pass, the SDK will contact a Nix authentication server to check if that device serial number is authorized."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"If the device cannot be authenticated (i.e. – an unknown allocation code was found and an internet connection is unavailable), the device will be disconnected with the status "},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.nixsensor.universalsdk\/documentation\/NixUniversalSDK\/DeviceStatus\/ERROR_UNAUTHORIZED"},{"type":"text","text":"."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The internet connection is required only once every 30 days – once authorized, this status is saved, and connections can be made offline for this time period."}]}]}]}]}],"type":"unorderedList"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"When the user has finished using the device, the connection can be closed using "},{"identifier":"doc:\/\/com.nixsensor.universalsdk\/documentation\/NixUniversalSDK\/IDeviceCompat\/disconnect()","type":"reference","isActive":true}]}]}],"type":"orderedList"},{"text":"Swift example","anchor":"Swift-example","level":4,"type":"heading"},{"code":["import UIKit","import NixUniversalSDK","","class MyConnectingViewController: UIViewController, DeviceStateDelegate {","    \/\/ Your existing code here","    \/\/ ...","","    \/\/ Device instance found by the DeviceScanner:","    var device: IDeviceCompat","","    \/\/ Example of calling `connect`","    func connectToDevice() {","        device.connect(self)","    }","","    \/\/ MARK: DeviceStateDelegate","    func onConnected(","        _ sender: NixUniversalSDK.IDeviceCompat","    ) {","        \/\/ Device has connected successfully","        \/\/ Device properties can now be queried","        \/\/ Device commands\/operations can now run","        \/\/ ...","    }","    ","    func onDisconnected(","        _ sender: NixUniversalSDK.IDeviceCompat, ","        status: NixUniversalSDK.DeviceStatus","    ) {","        \/\/ Handle status codes here, if desired in your application","        \/\/ At a minimum should check for ERROR_UNAUTHORIZED status (see notes)","        switch status {","        case .ERROR_UNAUTHORIZED:","            \/\/ Device not authorized for this license UUID","            \/\/ ...","            break","        case .ERROR_LICENSE:","            \/\/ There is an issue with the LicenseManager","            \/\/ Check LicenseManager.state","            \/\/ ...","            break","        case .SUCCESS:","            \/\/ Normal disconnect, triggered by device.disconnect()","            \/\/ ...","            break","        case .ERROR_DROPPED_CONNECTION:","            \/\/ Nix device dropped the connection","            \/\/ ...","            break","        case .ERROR_TIMEOUT:","            \/\/ Connection to Nix device timed out","            \/\/ ...","            break","        case .ERROR_MAX_ATTEMPTS, ","             .ERROR_UNSUPPORTED_DEVICE, ","             .ERROR_INTERNAL:","            \/\/ Other internal errors","            \/\/ ...","            break","        default:","            break","        }","    }","","    func onBatteryStateChanged(","        _ sender: NixUniversalSDK.IDeviceCompat, ","        newState: NSNumber","    ) {","        \/\/ Battery level has updated","        \/\/ ...","        print(\"Battery level has updated to \\(newState)\")","    }","","    func onExtPowerStateChanged(","        _ sender: NixUniversalSDK.IDeviceCompat, ","        newState: Bool","    ) {","        \/\/ External power has been connected or disconnected","        \/\/ ...","        print(\"External power connected is now \\(newState)\")","    }","}"],"syntax":"swift","type":"codeListing"},{"type":"heading","text":"Objective-C example","level":4,"anchor":"Objective-C-example"},{"type":"codeListing","syntax":"objc","code":["#import \"MyConnectingViewController.h\"","#import <NixUniversalSDK\/universalsdk.h>","","@interface MyConnectingViewController () <DeviceStateDelegate>","","\/\/ Device instance found by the DeviceScanner","@property(nonatomic, strong) DeviceCompatNonnull device;","","@end","","@implementation MyConnectingViewController","","\/\/ Your existing code here","\/\/ ...","","\/\/ Example of calling `connect`","- (void) connectToDevice {","    [self.device connect:self];","}","","#pragma mark DeviceStateDelegate","- (void)onConnected:(DeviceCompatNonnull)sender {","    \/\/ Device has connected successfully","    \/\/ Device properties can now be queried","    \/\/ Device commands\/operations can now run","    \/\/ ...","}","","- (void)onDisconnected:(DeviceCompatNonnull)sender","                status:(enum DeviceStatus)status {","    \/\/ Handle status codes here, if desired in your application","    \/\/ At a minimum should check for ERROR_UNAUTHORIZED status (see notes)","    switch (status) {","        case DeviceStatusERROR_UNAUTHORIZED:","            \/\/ Device not authorized for this license UUID","            \/\/ ...","            break;","        case DeviceStatusERROR_LICENSE:","            \/\/ There is an issue with the LicenseManager","            \/\/ Check LicenseManager.state","            \/\/ ...","            break;","        case DeviceStatusSUCCESS:","            \/\/ Normal disconnect, triggered by [device disconnect];","            \/\/ ...","            break;","        case DeviceStatusERROR_DROPPED_CONNECTION:","            \/\/ Nix device dropped the connection","            \/\/ ...","            break;","        case DeviceStatusERROR_TIMEOUT:","            \/\/ Connection to Nix device timed out","            \/\/ ...","            break;","        case DeviceStatusERROR_MAX_ATTEMPTS:","        case DeviceStatusERROR_UNSUPPORTED_DEVICE:","        case DeviceStatusERROR_INTERNAL:","            \/\/ Other internal errors","            \/\/ ...","            break;","    }","}","","- (void)onBatteryStateChanged:(DeviceCompatNonnull)sender","                     newState:(NSNumber * _Nonnull)newState {","    \/\/ Battery level has updated","    \/\/ ...","    NSLog(@\"Battery level has updated to %@\", newState);","}","","- (void)onExtPowerStateChanged:(DeviceCompatNonnull)sender","                      newState:(BOOL)newState {","    \/\/ External power has been connected or disconnected","    \/\/ ...","    NSString* stateString = newState ? @\"true\" : @\"false\";","    NSLog(@\"External power connected is now %@\", stateString);","}","","@end"]},{"type":"heading","level":2,"anchor":"Next-Steps","text":"Next Steps"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","identifier":"doc:\/\/com.nixsensor.universalsdk\/documentation\/NixUniversalSDK\/device-operations","isActive":true}]}]}],"type":"unorderedList"}],"kind":"content"}],"seeAlsoSections":[{"generated":true,"identifiers":["doc:\/\/com.nixsensor.universalsdk\/documentation\/NixUniversalSDK\/release-notes","doc:\/\/com.nixsensor.universalsdk\/documentation\/NixUniversalSDK\/add-to-xcode","doc:\/\/com.nixsensor.universalsdk\/documentation\/NixUniversalSDK\/activating-license","doc:\/\/com.nixsensor.universalsdk\/documentation\/NixUniversalSDK\/device-operations","doc:\/\/com.nixsensor.universalsdk\/documentation\/NixUniversalSDK\/handling-measurements","doc:\/\/com.nixsensor.universalsdk\/documentation\/NixUniversalSDK\/example-apps","doc:\/\/com.nixsensor.universalsdk\/documentation\/NixUniversalSDK\/wrapper"],"title":"Getting Started","anchor":"Getting-Started"}],"variants":[{"paths":["\/documentation\/nixuniversalsdk\/discovering-connecting"],"traits":[{"interfaceLanguage":"swift"}]},{"traits":[{"interfaceLanguage":"occ"}],"paths":["\/documentation\/nixuniversalsdk\/discovering-connecting"]}],"metadata":{"modules":[{"name":"NixUniversalSDK"}],"title":"Discovering and Connecting to Nix Devices","role":"article","roleHeading":"Article"},"hierarchy":{"paths":[["doc:\/\/com.nixsensor.universalsdk\/documentation\/NixUniversalSDK"]]},"abstract":[{"text":"Use the device scanner to discover Nix devices and open a connection","type":"text"}],"references":{"doc://com.nixsensor.universalsdk/documentation/NixUniversalSDK/DeviceStateDelegate":{"fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"DeviceStateDelegate"}],"abstract":[{"type":"text","text":"Definition for a callback from an "},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.nixsensor.universalsdk\/documentation\/NixUniversalSDK\/IDeviceCompat"},{"type":"text","text":" instance on a connection state change, battery state change, or external power state change."}],"title":"DeviceStateDelegate","url":"\/documentation\/nixuniversalsdk\/devicestatedelegate","identifier":"doc:\/\/com.nixsensor.universalsdk\/documentation\/NixUniversalSDK\/DeviceStateDelegate","type":"topic","kind":"symbol","role":"symbol","navigatorTitle":[{"text":"DeviceStateDelegate","kind":"identifier"}]},"doc://com.nixsensor.universalsdk/documentation/NixUniversalSDK/DeviceStatus/ERROR_UNAUTHORIZED":{"title":"DeviceStatus.ERROR_UNAUTHORIZED","role":"symbol","identifier":"doc:\/\/com.nixsensor.universalsdk\/documentation\/NixUniversalSDK\/DeviceStatus\/ERROR_UNAUTHORIZED","fragments":[{"kind":"keyword","text":"case"},{"kind":"text","text":" "},{"text":"ERROR_UNAUTHORIZED","kind":"identifier"}],"kind":"symbol","type":"topic","abstract":[{"text":"The device connection attempt was cancelled because the specified device was not authorized for this build of the Nix SDK. Check that the device allocation code and\/or serial number is expected to be authorized for this build.","type":"text"}],"url":"\/documentation\/nixuniversalsdk\/devicestatus\/error_unauthorized","navigatorTitle":[{"kind":"identifier","text":"DeviceStatusERROR_UNAUTHORIZED"}]},"doc://com.nixsensor.universalsdk/documentation/NixUniversalSDK/DeviceStateDelegate/onConnected(_:)":{"identifier":"doc:\/\/com.nixsensor.universalsdk\/documentation\/NixUniversalSDK\/DeviceStateDelegate\/onConnected(_:)","kind":"symbol","url":"\/documentation\/nixuniversalsdk\/devicestatedelegate\/onconnected(_:)","type":"topic","role":"symbol","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"onConnected","kind":"identifier"},{"text":"(","kind":"text"},{"kind":"typeIdentifier","text":"IDeviceCompat","preciseIdentifier":"c:@M@NixUniversalSDK@objc(pl)IDeviceCompat"},{"kind":"text","text":")"}],"required":true,"title":"onConnected(_:)","abstract":[{"type":"text","text":"Called when the Nix device has completed the connection process and is now idle."}],"navigatorTitle":[{"kind":"identifier","text":"onConnected:"}]},"doc://com.nixsensor.universalsdk/documentation/NixUniversalSDK/ScannerStateDelegate":{"navigatorTitle":[{"text":"ScannerStateDelegate","kind":"identifier"}],"kind":"symbol","url":"\/documentation\/nixuniversalsdk\/scannerstatedelegate","identifier":"doc:\/\/com.nixsensor.universalsdk\/documentation\/NixUniversalSDK\/ScannerStateDelegate","fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"text":"ScannerStateDelegate","kind":"identifier"}],"abstract":[{"text":"Protocol definition for a callback to be invoked when an ","type":"text"},{"identifier":"doc:\/\/com.nixsensor.universalsdk\/documentation\/NixUniversalSDK\/IDeviceScanner","type":"reference","isActive":true},{"type":"text","text":" starts or stops a search."}],"type":"topic","title":"ScannerStateDelegate","role":"symbol"},"doc://com.nixsensor.universalsdk/documentation/NixUniversalSDK/IDeviceScanner/stop()":{"type":"topic","role":"symbol","navigatorTitle":[{"text":"stop","kind":"identifier"}],"title":"stop()","url":"\/documentation\/nixuniversalsdk\/idevicescanner\/stop()","abstract":[{"type":"text","text":"Stops a Bluetooth search if one is currently running."}],"kind":"symbol","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"stop"},{"kind":"text","text":"()"}],"identifier":"doc:\/\/com.nixsensor.universalsdk\/documentation\/NixUniversalSDK\/IDeviceScanner\/stop()","required":true},"doc://com.nixsensor.universalsdk/documentation/NixUniversalSDK/IDeviceScanner/start(scanPeriodMs:closure:)":{"role":"symbol","kind":"symbol","title":"start(scanPeriodMs:closure:)","navigatorTitle":[{"text":"startForPeriodMs:withClosure:","kind":"identifier"}],"type":"topic","abstract":[{"type":"text","text":"Starts a search for nearby Nix devices using Bluetooth for a selected time interval. If no timeout interval is specified, the search will run for "},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.nixsensor.universalsdk\/documentation\/NixUniversalSDK\/DeviceScanner\/DEFAULT_GENERAL_SCAN_PERIOD_MS"},{"text":".","type":"text"}],"url":"\/documentation\/nixuniversalsdk\/idevicescanner\/start(scanperiodms:closure:)","required":true,"identifier":"doc:\/\/com.nixsensor.universalsdk\/documentation\/NixUniversalSDK\/IDeviceScanner\/start(scanPeriodMs:closure:)","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"start"},{"text":"(","kind":"text"},{"text":"scanPeriodMs","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Int","kind":"typeIdentifier","preciseIdentifier":"s:Si"},{"kind":"text","text":", "},{"text":"closure","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"DeviceFoundCallback","preciseIdentifier":"s:15NixUniversalSDK19DeviceFoundCallbacka"},{"text":") -> ","kind":"text"},{"kind":"typeIdentifier","text":"DeviceScannerState","preciseIdentifier":"c:@M@NixUniversalSDK@E@DeviceScannerState"}]},"doc://com.nixsensor.universalsdk/documentation/NixUniversalSDK/IDeviceCompat":{"type":"topic","fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"kind":"identifier","text":"IDeviceCompat"}],"kind":"symbol","identifier":"doc:\/\/com.nixsensor.universalsdk\/documentation\/NixUniversalSDK\/IDeviceCompat","title":"IDeviceCompat","abstract":[{"type":"text","text":"Protocol describing the supported properties and methods for a Nix device. "},{"type":"reference","identifier":"doc:\/\/com.nixsensor.universalsdk\/documentation\/NixUniversalSDK\/IDeviceCompat","isActive":true},{"text":" objects are found nearby using the ","type":"text"},{"isActive":true,"identifier":"doc:\/\/com.nixsensor.universalsdk\/documentation\/NixUniversalSDK\/DeviceScanner","type":"reference"},{"type":"text","text":"."}],"url":"\/documentation\/nixuniversalsdk\/idevicecompat","role":"symbol","navigatorTitle":[{"text":"IDeviceCompat","kind":"identifier"}]},"doc://com.nixsensor.universalsdk/documentation/NixUniversalSDK/activating-license":{"url":"\/documentation\/nixuniversalsdk\/activating-license","role":"article","kind":"article","abstract":[{"text":"Enable Nix device functions with your license code","type":"text"}],"type":"topic","identifier":"doc:\/\/com.nixsensor.universalsdk\/documentation\/NixUniversalSDK\/activating-license","title":"Activating the SDK License"},"doc://com.nixsensor.universalsdk/documentation/NixUniversalSDK/wrapper":{"abstract":[{"text":"Review an example project which provides a C\/C++ interface for macOS applications","type":"text"}],"type":"topic","kind":"article","url":"\/documentation\/nixuniversalsdk\/wrapper","title":"Wrapper for Usage in C\/C++","identifier":"doc:\/\/com.nixsensor.universalsdk\/documentation\/NixUniversalSDK\/wrapper","role":"article"},"doc://com.nixsensor.universalsdk/documentation/NixUniversalSDK/DeviceFoundCallback":{"kind":"symbol","type":"topic","role":"symbol","fragments":[{"text":"typealias","kind":"keyword"},{"kind":"text","text":" "},{"text":"DeviceFoundCallback","kind":"identifier"}],"abstract":[{"type":"text","text":"Definition for a closure invoked when an "},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.nixsensor.universalsdk\/documentation\/NixUniversalSDK\/IDeviceScanner"},{"text":" has discovered a supported Nix device","type":"text"}],"url":"\/documentation\/nixuniversalsdk\/devicefoundcallback","title":"DeviceFoundCallback","identifier":"doc:\/\/com.nixsensor.universalsdk\/documentation\/NixUniversalSDK\/DeviceFoundCallback","navigatorTitle":[{"text":"DeviceFoundCallback","kind":"identifier"}]},"doc://com.nixsensor.universalsdk/documentation/NixUniversalSDK/DeviceStateDelegate/onDisconnected(_:status:)":{"fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"onDisconnected"},{"text":"(","kind":"text"},{"kind":"typeIdentifier","text":"IDeviceCompat","preciseIdentifier":"c:@M@NixUniversalSDK@objc(pl)IDeviceCompat"},{"kind":"text","text":", "},{"text":"status","kind":"externalParam"},{"kind":"text","text":": "},{"text":"DeviceStatus","kind":"typeIdentifier","preciseIdentifier":"c:@M@NixUniversalSDK@E@DeviceStatus"},{"kind":"text","text":")"}],"title":"onDisconnected(_:status:)","abstract":[{"type":"text","text":"Called when the Nix device has disconnected from the host."}],"kind":"symbol","required":true,"url":"\/documentation\/nixuniversalsdk\/devicestatedelegate\/ondisconnected(_:status:)","type":"topic","role":"symbol","identifier":"doc:\/\/com.nixsensor.universalsdk\/documentation\/NixUniversalSDK\/DeviceStateDelegate\/onDisconnected(_:status:)","navigatorTitle":[{"kind":"identifier","text":"onDisconnected:status:"}]},"doc://com.nixsensor.universalsdk/documentation/NixUniversalSDK/DeviceScanner/DEFAULT_SINGLE_DEVICE_PERIOD_MS":{"title":"DEFAULT_SINGLE_DEVICE_PERIOD_MS","url":"\/documentation\/nixuniversalsdk\/devicescanner\/default_single_device_period_ms","kind":"symbol","identifier":"doc:\/\/com.nixsensor.universalsdk\/documentation\/NixUniversalSDK\/DeviceScanner\/DEFAULT_SINGLE_DEVICE_PERIOD_MS","fragments":[{"kind":"keyword","text":"static"},{"text":" ","kind":"text"},{"kind":"keyword","text":"let"},{"kind":"text","text":" "},{"text":"DEFAULT_SINGLE_DEVICE_PERIOD_MS","kind":"identifier"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Int","preciseIdentifier":"s:Si"}],"role":"symbol","type":"topic","abstract":[{"type":"text","text":"Scan period in milliseconds (10000) used when no time period is provided to "},{"type":"reference","identifier":"doc:\/\/com.nixsensor.universalsdk\/documentation\/NixUniversalSDK\/IDeviceScanner\/startSearchForId(_:closure:)","isActive":true}]},"doc://com.nixsensor.universalsdk/documentation/NixUniversalSDK/LicenseManagerState/ACTIVE":{"type":"topic","kind":"symbol","identifier":"doc:\/\/com.nixsensor.universalsdk\/documentation\/NixUniversalSDK\/LicenseManagerState\/ACTIVE","abstract":[{"type":"text","text":"The license has activated successfully and Nix Universal SDK functions are available."}],"url":"\/documentation\/nixuniversalsdk\/licensemanagerstate\/active","role":"symbol","title":"LicenseManagerState.ACTIVE","fragments":[{"kind":"keyword","text":"case"},{"text":" ","kind":"text"},{"text":"ACTIVE","kind":"identifier"}],"navigatorTitle":[{"text":"LicenseManagerStateACTIVE","kind":"identifier"}]},"doc://com.nixsensor.universalsdk/documentation/NixUniversalSDK/IDeviceCompat/name":{"abstract":[{"text":"Name for this device","type":"text"}],"kind":"symbol","type":"topic","fragments":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"text":"name","kind":"identifier"},{"kind":"text","text":": "},{"text":"String","kind":"typeIdentifier","preciseIdentifier":"s:SS"}],"title":"name","identifier":"doc:\/\/com.nixsensor.universalsdk\/documentation\/NixUniversalSDK\/IDeviceCompat\/name","role":"symbol","required":true,"navigatorTitle":[{"kind":"identifier","text":"name"}],"url":"\/documentation\/nixuniversalsdk\/idevicecompat\/name"},"doc://com.nixsensor.universalsdk/documentation/NixUniversalSDK/IDeviceScanner/startSearchForId(_:closure:)":{"url":"\/documentation\/nixuniversalsdk\/idevicescanner\/startsearchforid(_:closure:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"startSearchForId","kind":"identifier"},{"text":"(","kind":"text"},{"text":"String","kind":"typeIdentifier","preciseIdentifier":"s:SS"},{"text":", ","kind":"text"},{"text":"closure","kind":"externalParam"},{"kind":"text","text":": "},{"preciseIdentifier":"s:15NixUniversalSDK19DeviceFoundCallbacka","text":"DeviceFoundCallback","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"kind":"typeIdentifier","text":"DeviceScannerState","preciseIdentifier":"c:@M@NixUniversalSDK@E@DeviceScannerState"}],"title":"startSearchForId(_:closure:)","abstract":[{"type":"text","text":"Starts a search for a specific Nix device using Bluetooth. The search will run until the specified device is found, or until "},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.nixsensor.universalsdk\/documentation\/NixUniversalSDK\/DeviceScanner\/DEFAULT_SINGLE_DEVICE_PERIOD_MS"},{"text":" elapses, whichever is shorter. Invoked with a ","type":"text"},{"type":"codeVoice","code":"nil"},{"type":"text","text":" result when a search times out and device was not found."}],"identifier":"doc:\/\/com.nixsensor.universalsdk\/documentation\/NixUniversalSDK\/IDeviceScanner\/startSearchForId(_:closure:)","type":"topic","navigatorTitle":[{"kind":"identifier","text":"startSearchForId:withClosure:"}],"role":"symbol","kind":"symbol","required":true},"doc://com.nixsensor.universalsdk/documentation/NixUniversalSDK":{"kind":"symbol","role":"collection","title":"NixUniversalSDK","identifier":"doc:\/\/com.nixsensor.universalsdk\/documentation\/NixUniversalSDK","abstract":[{"type":"text","text":"A library to allow integration of Nix devices into third-party iOS and macOS applications."}],"type":"topic","url":"\/documentation\/nixuniversalsdk"},"doc://com.nixsensor.universalsdk/documentation/NixUniversalSDK/ScannerStateDelegate/onScannerInit(_:state:)":{"kind":"symbol","role":"symbol","navigatorTitle":[{"text":"onScannerInit:state:","kind":"identifier"}],"abstract":[{"type":"text","text":"Called when the "},{"code":"IDeviceScanner","type":"codeVoice"},{"type":"text","text":" has initialized. Check "},{"type":"codeVoice","code":"state"},{"text":" to determine success or failure code.","type":"text"}],"type":"topic","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"onScannerInit"},{"text":"(","kind":"text"},{"kind":"typeIdentifier","text":"IDeviceScanner","preciseIdentifier":"c:@M@NixUniversalSDK@objc(pl)IDeviceScanner"},{"text":", ","kind":"text"},{"text":"state","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"c:@M@NixUniversalSDK@E@DeviceScannerState","kind":"typeIdentifier","text":"DeviceScannerState"},{"text":")","kind":"text"}],"url":"\/documentation\/nixuniversalsdk\/scannerstatedelegate\/onscannerinit(_:state:)","identifier":"doc:\/\/com.nixsensor.universalsdk\/documentation\/NixUniversalSDK\/ScannerStateDelegate\/onScannerInit(_:state:)","title":"onScannerInit(_:state:)","required":true},"doc://com.nixsensor.universalsdk/documentation/NixUniversalSDK/example-apps":{"identifier":"doc:\/\/com.nixsensor.universalsdk\/documentation\/NixUniversalSDK\/example-apps","role":"article","title":"Example Applications","abstract":[{"text":"Explore source code for demo iOS and macOS applications","type":"text"}],"type":"topic","kind":"article","url":"\/documentation\/nixuniversalsdk\/example-apps"},"doc://com.nixsensor.universalsdk/documentation/NixUniversalSDK/IDeviceScanner":{"navigatorTitle":[{"kind":"identifier","text":"IDeviceScanner"}],"fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"IDeviceScanner"}],"url":"\/documentation\/nixuniversalsdk\/idevicescanner","kind":"symbol","role":"symbol","abstract":[{"type":"text","text":"Protocol implemented by the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.nixsensor.universalsdk\/documentation\/NixUniversalSDK\/DeviceScanner"}],"title":"IDeviceScanner","type":"topic","identifier":"doc:\/\/com.nixsensor.universalsdk\/documentation\/NixUniversalSDK\/IDeviceScanner"},"doc://com.nixsensor.universalsdk/documentation/NixUniversalSDK/handling-measurements":{"kind":"article","role":"article","type":"topic","abstract":[{"text":"Query measurement values including colorimetry, spectral reflectance, and density","type":"text"}],"url":"\/documentation\/nixuniversalsdk\/handling-measurements","identifier":"doc:\/\/com.nixsensor.universalsdk\/documentation\/NixUniversalSDK\/handling-measurements","title":"Handling Measurement Data"},"doc://com.nixsensor.universalsdk/documentation/NixUniversalSDK/device-operations":{"identifier":"doc:\/\/com.nixsensor.universalsdk\/documentation\/NixUniversalSDK\/device-operations","url":"\/documentation\/nixuniversalsdk\/device-operations","kind":"article","type":"topic","role":"article","abstract":[{"text":"Take measurements, set device options, and query device properties","type":"text"}],"title":"Device Operations"},"doc://com.nixsensor.universalsdk/documentation/NixUniversalSDK/IDeviceCompat/rssi":{"abstract":[{"text":"Signal strength for this device","type":"text"}],"kind":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"var"},{"text":" ","kind":"text"},{"text":"rssi","kind":"identifier"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:Si","text":"Int"}],"title":"rssi","identifier":"doc:\/\/com.nixsensor.universalsdk\/documentation\/NixUniversalSDK\/IDeviceCompat\/rssi","role":"symbol","required":true,"navigatorTitle":[{"text":"rssi","kind":"identifier"}],"url":"\/documentation\/nixuniversalsdk\/idevicecompat\/rssi"},"doc://com.nixsensor.universalsdk/documentation/NixUniversalSDK/DeviceScannerState/IDLE":{"identifier":"doc:\/\/com.nixsensor.universalsdk\/documentation\/NixUniversalSDK\/DeviceScannerState\/IDLE","role":"symbol","abstract":[{"type":"text","text":"Bluetooth scanner is not actively searching for devices."}],"kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"DeviceScannerStateIDLE"}],"fragments":[{"kind":"keyword","text":"case"},{"kind":"text","text":" "},{"text":"IDLE","kind":"identifier"}],"title":"DeviceScannerState.IDLE","url":"\/documentation\/nixuniversalsdk\/devicescannerstate\/idle","type":"topic"},"doc://com.nixsensor.universalsdk/documentation/NixUniversalSDK/IDeviceCompat/connect(delegate:)":{"url":"\/documentation\/nixuniversalsdk\/idevicecompat\/connect(delegate:)","identifier":"doc:\/\/com.nixsensor.universalsdk\/documentation\/NixUniversalSDK\/IDeviceCompat\/connect(delegate:)","required":true,"role":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"connect"},{"kind":"text","text":"("},{"text":"delegate","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"c:@M@NixUniversalSDK@objc(pl)DeviceStateDelegate","text":"DeviceStateDelegate"},{"kind":"text","text":")"}],"title":"connect(delegate:)","abstract":[{"type":"text","text":"Open a connection to this Nix device. This operation is asynchronous and this method returns immediately. Status of this operation is updated via the provided "},{"type":"reference","identifier":"doc:\/\/com.nixsensor.universalsdk\/documentation\/NixUniversalSDK\/DeviceStateDelegate","isActive":true},{"type":"text","text":" callback."}],"type":"topic","navigatorTitle":[{"kind":"identifier","text":"connect:"}],"kind":"symbol"},"doc://com.nixsensor.universalsdk/documentation/NixUniversalSDK/release-notes":{"kind":"article","abstract":[{"text":"Review the changes made in this version of the library","type":"text"}],"identifier":"doc:\/\/com.nixsensor.universalsdk\/documentation\/NixUniversalSDK\/release-notes","url":"\/documentation\/nixuniversalsdk\/release-notes","title":"Release Notes","type":"topic","role":"article"},"doc://com.nixsensor.universalsdk/documentation/NixUniversalSDK/DeviceScannerState/ERROR_LICENSE":{"role":"symbol","kind":"symbol","fragments":[{"text":"case","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ERROR_LICENSE","kind":"identifier"}],"type":"topic","url":"\/documentation\/nixuniversalsdk\/devicescannerstate\/error_license","identifier":"doc:\/\/com.nixsensor.universalsdk\/documentation\/NixUniversalSDK\/DeviceScannerState\/ERROR_LICENSE","title":"DeviceScannerState.ERROR_LICENSE","abstract":[{"text":"Bluetooth scanner could not start due to a problem with the ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.nixsensor.universalsdk\/documentation\/NixUniversalSDK\/LicenseManager"},{"type":"text","text":". Check "},{"type":"reference","identifier":"doc:\/\/com.nixsensor.universalsdk\/documentation\/NixUniversalSDK\/LicenseManager\/state","isActive":true},{"text":" for details.","type":"text"}],"navigatorTitle":[{"text":"DeviceScannerStateERROR_LICENSE","kind":"identifier"}]},"doc://com.nixsensor.universalsdk/documentation/NixUniversalSDK/IDeviceCompat/disconnect()":{"role":"symbol","identifier":"doc:\/\/com.nixsensor.universalsdk\/documentation\/NixUniversalSDK\/IDeviceCompat\/disconnect()","url":"\/documentation\/nixuniversalsdk\/idevicecompat\/disconnect()","required":true,"fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"disconnect"},{"text":"()","kind":"text"}],"kind":"symbol","type":"topic","title":"disconnect()","abstract":[{"type":"text","text":"Disconnect from this Nix device, or cancel a connection attempt currently in progress."}],"navigatorTitle":[{"text":"disconnect","kind":"identifier"}]},"doc://com.nixsensor.universalsdk/documentation/NixUniversalSDK/LicenseManager":{"type":"topic","navigatorTitle":[{"kind":"identifier","text":"LicenseManager"}],"url":"\/documentation\/nixuniversalsdk\/licensemanager","identifier":"doc:\/\/com.nixsensor.universalsdk\/documentation\/NixUniversalSDK\/LicenseManager","role":"symbol","kind":"symbol","abstract":[{"text":"Class used to manage the license for the Nix Universal SDK. Members of this class are not instantiated or accessed directly. Access to a single shared instance is provided via static methods and properties.","type":"text"}],"fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"LicenseManager"}],"title":"LicenseManager"},"doc://com.nixsensor.universalsdk/documentation/NixUniversalSDK/LicenseManager/state":{"type":"topic","fragments":[{"text":"static","kind":"keyword"},{"kind":"text","text":" "},{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"text":"state","kind":"identifier"},{"text":": ","kind":"text"},{"text":"LicenseManagerState","preciseIdentifier":"c:@M@NixUniversalSDK@E@LicenseManagerState","kind":"typeIdentifier"}],"kind":"symbol","identifier":"doc:\/\/com.nixsensor.universalsdk\/documentation\/NixUniversalSDK\/LicenseManager\/state","title":"state","abstract":[{"type":"text","text":"Describes the current state of the  "},{"type":"reference","identifier":"doc:\/\/com.nixsensor.universalsdk\/documentation\/NixUniversalSDK\/LicenseManager","isActive":true},{"text":". Nix Universal SDK functions are available only if license is active (i.e. - the state is ","type":"text"},{"identifier":"doc:\/\/com.nixsensor.universalsdk\/documentation\/NixUniversalSDK\/LicenseManagerState\/ACTIVE","type":"reference","isActive":true},{"type":"text","text":")"}],"url":"\/documentation\/nixuniversalsdk\/licensemanager\/state","role":"symbol","navigatorTitle":[{"text":"state","kind":"identifier"}]},"doc://com.nixsensor.universalsdk/documentation/NixUniversalSDK/IDeviceCompat/id":{"abstract":[{"type":"text","text":"Unique identifier for this device"}],"url":"\/documentation\/nixuniversalsdk\/idevicecompat\/id","type":"topic","title":"id","kind":"symbol","required":true,"identifier":"doc:\/\/com.nixsensor.universalsdk\/documentation\/NixUniversalSDK\/IDeviceCompat\/id","role":"symbol","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"id"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:SS","text":"String"}],"navigatorTitle":[{"kind":"identifier","text":"id"}]},"doc://com.nixsensor.universalsdk/documentation/NixUniversalSDK/ScannerStateDelegate/onScannerStopped(_:)":{"kind":"symbol","identifier":"doc:\/\/com.nixsensor.universalsdk\/documentation\/NixUniversalSDK\/ScannerStateDelegate\/onScannerStopped(_:)","required":true,"title":"onScannerStopped(_:)","role":"symbol","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"onScannerStopped","kind":"identifier"},{"text":"(","kind":"text"},{"preciseIdentifier":"c:@M@NixUniversalSDK@objc(pl)IDeviceScanner","text":"IDeviceScanner","kind":"typeIdentifier"},{"text":")","kind":"text"}],"navigatorTitle":[{"kind":"identifier","text":"onScannerStopped:"}],"type":"topic","abstract":[{"text":"Called when an ","type":"text"},{"type":"codeVoice","code":"IDeviceScanner"},{"text":" has stopped searching","type":"text"}],"url":"\/documentation\/nixuniversalsdk\/scannerstatedelegate\/onscannerstopped(_:)"},"doc://com.nixsensor.universalsdk/documentation/NixUniversalSDK/DeviceScanner":{"identifier":"doc:\/\/com.nixsensor.universalsdk\/documentation\/NixUniversalSDK\/DeviceScanner","type":"topic","fragments":[{"text":"class","kind":"keyword"},{"kind":"text","text":" "},{"text":"DeviceScanner","kind":"identifier"}],"kind":"symbol","title":"DeviceScanner","abstract":[{"type":"text","text":"Class used to discover nearby Nix devices"}],"url":"\/documentation\/nixuniversalsdk\/devicescanner","navigatorTitle":[{"text":"DeviceScanner","kind":"identifier"}],"role":"symbol"},"doc://com.nixsensor.universalsdk/documentation/NixUniversalSDK/LicenseManager/allowedDeviceTypes-4f98s":{"fragments":[{"kind":"keyword","text":"static"},{"text":" ","kind":"text"},{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"text":"allowedDeviceTypes","kind":"identifier"},{"kind":"text","text":": "},{"preciseIdentifier":"s:Sh","text":"Set","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"DeviceType","kind":"typeIdentifier","preciseIdentifier":"c:@M@NixUniversalSDK@E@DeviceType"},{"kind":"text","text":">"}],"title":"allowedDeviceTypes","kind":"symbol","identifier":"doc:\/\/com.nixsensor.universalsdk\/documentation\/NixUniversalSDK\/LicenseManager\/allowedDeviceTypes-4f98s","type":"topic","role":"symbol","abstract":[{"type":"text","text":"Set of device types supported by the current license. Available in Swift only."}],"url":"\/documentation\/nixuniversalsdk\/licensemanager\/alloweddevicetypes-4f98s"},"doc://com.nixsensor.universalsdk/documentation/NixUniversalSDK/IDeviceCompat/type":{"title":"type","required":true,"role":"symbol","fragments":[{"text":"var","kind":"keyword"},{"kind":"text","text":" "},{"text":"type","kind":"identifier"},{"text":": ","kind":"text"},{"preciseIdentifier":"c:@M@NixUniversalSDK@E@DeviceType","text":"DeviceType","kind":"typeIdentifier"}],"navigatorTitle":[{"kind":"identifier","text":"type"}],"abstract":[{"text":"Type for this device","type":"text"}],"identifier":"doc:\/\/com.nixsensor.universalsdk\/documentation\/NixUniversalSDK\/IDeviceCompat\/type","kind":"symbol","type":"topic","url":"\/documentation\/nixuniversalsdk\/idevicecompat\/type"},"doc://com.nixsensor.universalsdk/documentation/NixUniversalSDK/IDeviceCompat/interfaceType":{"type":"topic","identifier":"doc:\/\/com.nixsensor.universalsdk\/documentation\/NixUniversalSDK\/IDeviceCompat\/interfaceType","url":"\/documentation\/nixuniversalsdk\/idevicecompat\/interfacetype","title":"interfaceType","kind":"symbol","required":true,"role":"symbol","abstract":[{"type":"text","text":"Interface \/ connection type for this device"}],"navigatorTitle":[{"text":"interfaceType","kind":"identifier"}],"fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"text":"interfaceType","kind":"identifier"},{"text":": ","kind":"text"},{"preciseIdentifier":"c:@M@NixUniversalSDK@E@InterfaceType","text":"InterfaceType","kind":"typeIdentifier"}]},"doc://com.nixsensor.universalsdk/documentation/NixUniversalSDK/add-to-xcode":{"identifier":"doc:\/\/com.nixsensor.universalsdk\/documentation\/NixUniversalSDK\/add-to-xcode","abstract":[{"text":"Add the library bundle to your project and declare peripheral uses","type":"text"}],"kind":"article","title":"Adding to Your Xcode Project","type":"topic","role":"article","url":"\/documentation\/nixuniversalsdk\/add-to-xcode"},"doc://com.nixsensor.universalsdk/documentation/NixUniversalSDK/DeviceScanner/DEFAULT_GENERAL_SCAN_PERIOD_MS":{"role":"symbol","kind":"symbol","title":"DEFAULT_GENERAL_SCAN_PERIOD_MS","abstract":[{"type":"text","text":"Scan period in milliseconds (20000) used when no time period is provided to "},{"identifier":"doc:\/\/com.nixsensor.universalsdk\/documentation\/NixUniversalSDK\/IDeviceScanner\/start(scanPeriodMs:closure:)","isActive":true,"type":"reference"}],"type":"topic","url":"\/documentation\/nixuniversalsdk\/devicescanner\/default_general_scan_period_ms","fragments":[{"text":"static","kind":"keyword"},{"kind":"text","text":" "},{"text":"let","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"DEFAULT_GENERAL_SCAN_PERIOD_MS"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Si","kind":"typeIdentifier","text":"Int"}],"identifier":"doc:\/\/com.nixsensor.universalsdk\/documentation\/NixUniversalSDK\/DeviceScanner\/DEFAULT_GENERAL_SCAN_PERIOD_MS"}},"variantOverrides":[{"traits":[{"interfaceLanguage":"occ"}],"patch":[{"op":"replace","path":"\/identifier\/interfaceLanguage","value":"occ"},{"value":null,"path":"\/topicSections","op":"add"},{"op":"replace","value":[{"identifiers":["doc:\/\/com.nixsensor.universalsdk\/documentation\/NixUniversalSDK\/release-notes","doc:\/\/com.nixsensor.universalsdk\/documentation\/NixUniversalSDK\/add-to-xcode","doc:\/\/com.nixsensor.universalsdk\/documentation\/NixUniversalSDK\/activating-license","doc:\/\/com.nixsensor.universalsdk\/documentation\/NixUniversalSDK\/device-operations","doc:\/\/com.nixsensor.universalsdk\/documentation\/NixUniversalSDK\/handling-measurements","doc:\/\/com.nixsensor.universalsdk\/documentation\/NixUniversalSDK\/example-apps","doc:\/\/com.nixsensor.universalsdk\/documentation\/NixUniversalSDK\/wrapper"],"generated":true,"title":"Getting Started","anchor":"Getting-Started"}],"path":"\/seeAlsoSections"},{"op":"replace","value":"DeviceStateDelegate","path":"\/references\/doc:~1~1com.nixsensor.universalsdk~1documentation~1NixUniversalSDK~1DeviceStateDelegate\/title"},{"op":"replace","path":"\/references\/doc:~1~1com.nixsensor.universalsdk~1documentation~1NixUniversalSDK~1DeviceStateDelegate\/fragments","value":[{"kind":"identifier","text":"DeviceStateDelegate"}]},{"op":"replace","path":"\/references\/doc:~1~1com.nixsensor.universalsdk~1documentation~1NixUniversalSDK~1DeviceStateDelegate\/navigatorTitle","value":[{"text":"DeviceStateDelegate","kind":"identifier"}]},{"op":"replace","path":"\/references\/doc:~1~1com.nixsensor.universalsdk~1documentation~1NixUniversalSDK~1DeviceStatus~1ERROR_UNAUTHORIZED\/title","value":"DeviceStatusERROR_UNAUTHORIZED"},{"value":[{"kind":"identifier","text":"DeviceStatusERROR_UNAUTHORIZED"}],"op":"replace","path":"\/references\/doc:~1~1com.nixsensor.universalsdk~1documentation~1NixUniversalSDK~1DeviceStatus~1ERROR_UNAUTHORIZED\/fragments"},{"path":"\/references\/doc:~1~1com.nixsensor.universalsdk~1documentation~1NixUniversalSDK~1DeviceStateDelegate~1onConnected(_:)\/title","op":"replace","value":"onConnected:"},{"value":[{"text":"- ","kind":"text"},{"kind":"identifier","text":"onConnected:"}],"op":"replace","path":"\/references\/doc:~1~1com.nixsensor.universalsdk~1documentation~1NixUniversalSDK~1DeviceStateDelegate~1onConnected(_:)\/fragments"},{"value":"ScannerStateDelegate","op":"replace","path":"\/references\/doc:~1~1com.nixsensor.universalsdk~1documentation~1NixUniversalSDK~1ScannerStateDelegate\/title"},{"value":[{"text":"ScannerStateDelegate","kind":"identifier"}],"op":"replace","path":"\/references\/doc:~1~1com.nixsensor.universalsdk~1documentation~1NixUniversalSDK~1ScannerStateDelegate\/fragments"},{"value":[{"kind":"identifier","text":"ScannerStateDelegate"}],"path":"\/references\/doc:~1~1com.nixsensor.universalsdk~1documentation~1NixUniversalSDK~1ScannerStateDelegate\/navigatorTitle","op":"replace"},{"path":"\/references\/doc:~1~1com.nixsensor.universalsdk~1documentation~1NixUniversalSDK~1IDeviceScanner~1stop()\/title","value":"stop","op":"replace"},{"op":"replace","path":"\/references\/doc:~1~1com.nixsensor.universalsdk~1documentation~1NixUniversalSDK~1IDeviceScanner~1stop()\/fragments","value":[{"kind":"text","text":"- "},{"kind":"identifier","text":"stop"}]},{"op":"replace","path":"\/references\/doc:~1~1com.nixsensor.universalsdk~1documentation~1NixUniversalSDK~1IDeviceScanner~1start(scanPeriodMs:closure:)\/title","value":"startForPeriodMs:withClosure:"},{"value":[{"text":"- ","kind":"text"},{"kind":"identifier","text":"startForPeriodMs:withClosure:"}],"path":"\/references\/doc:~1~1com.nixsensor.universalsdk~1documentation~1NixUniversalSDK~1IDeviceScanner~1start(scanPeriodMs:closure:)\/fragments","op":"replace"},{"value":"IDeviceCompat","op":"replace","path":"\/references\/doc:~1~1com.nixsensor.universalsdk~1documentation~1NixUniversalSDK~1IDeviceCompat\/title"},{"value":[{"kind":"identifier","text":"IDeviceCompat"}],"op":"replace","path":"\/references\/doc:~1~1com.nixsensor.universalsdk~1documentation~1NixUniversalSDK~1IDeviceCompat\/fragments"},{"path":"\/references\/doc:~1~1com.nixsensor.universalsdk~1documentation~1NixUniversalSDK~1IDeviceCompat\/navigatorTitle","op":"replace","value":[{"text":"IDeviceCompat","kind":"identifier"}]},{"path":"\/references\/doc:~1~1com.nixsensor.universalsdk~1documentation~1NixUniversalSDK~1DeviceStateDelegate~1onDisconnected(_:status:)\/title","value":"onDisconnected:status:","op":"replace"},{"op":"replace","path":"\/references\/doc:~1~1com.nixsensor.universalsdk~1documentation~1NixUniversalSDK~1DeviceStateDelegate~1onDisconnected(_:status:)\/fragments","value":[{"text":"- ","kind":"text"},{"text":"onDisconnected:status:","kind":"identifier"}]},{"path":"\/references\/doc:~1~1com.nixsensor.universalsdk~1documentation~1NixUniversalSDK~1LicenseManagerState~1ACTIVE\/title","value":"LicenseManagerStateACTIVE","op":"replace"},{"op":"replace","path":"\/references\/doc:~1~1com.nixsensor.universalsdk~1documentation~1NixUniversalSDK~1LicenseManagerState~1ACTIVE\/fragments","value":[{"text":"LicenseManagerStateACTIVE","kind":"identifier"}]},{"value":"name","path":"\/references\/doc:~1~1com.nixsensor.universalsdk~1documentation~1NixUniversalSDK~1IDeviceCompat~1name\/title","op":"replace"},{"path":"\/references\/doc:~1~1com.nixsensor.universalsdk~1documentation~1NixUniversalSDK~1IDeviceCompat~1name\/fragments","value":[{"kind":"identifier","text":"name"}],"op":"replace"},{"path":"\/references\/doc:~1~1com.nixsensor.universalsdk~1documentation~1NixUniversalSDK~1IDeviceScanner~1startSearchForId(_:closure:)\/title","value":"startSearchForId:withClosure:","op":"replace"},{"path":"\/references\/doc:~1~1com.nixsensor.universalsdk~1documentation~1NixUniversalSDK~1IDeviceScanner~1startSearchForId(_:closure:)\/fragments","value":[{"text":"- ","kind":"text"},{"kind":"identifier","text":"startSearchForId:withClosure:"}],"op":"replace"},{"value":"onScannerInit:state:","op":"replace","path":"\/references\/doc:~1~1com.nixsensor.universalsdk~1documentation~1NixUniversalSDK~1ScannerStateDelegate~1onScannerInit(_:state:)\/title"},{"op":"replace","value":[{"text":"- ","kind":"text"},{"kind":"identifier","text":"onScannerInit:state:"}],"path":"\/references\/doc:~1~1com.nixsensor.universalsdk~1documentation~1NixUniversalSDK~1ScannerStateDelegate~1onScannerInit(_:state:)\/fragments"},{"op":"replace","path":"\/references\/doc:~1~1com.nixsensor.universalsdk~1documentation~1NixUniversalSDK~1IDeviceScanner\/title","value":"IDeviceScanner"},{"op":"replace","path":"\/references\/doc:~1~1com.nixsensor.universalsdk~1documentation~1NixUniversalSDK~1IDeviceScanner\/fragments","value":[{"kind":"identifier","text":"IDeviceScanner"}]},{"path":"\/references\/doc:~1~1com.nixsensor.universalsdk~1documentation~1NixUniversalSDK~1IDeviceScanner\/navigatorTitle","op":"replace","value":[{"kind":"identifier","text":"IDeviceScanner"}]},{"value":"rssi","op":"replace","path":"\/references\/doc:~1~1com.nixsensor.universalsdk~1documentation~1NixUniversalSDK~1IDeviceCompat~1rssi\/title"},{"op":"replace","path":"\/references\/doc:~1~1com.nixsensor.universalsdk~1documentation~1NixUniversalSDK~1IDeviceCompat~1rssi\/fragments","value":[{"kind":"identifier","text":"rssi"}]},{"op":"replace","path":"\/references\/doc:~1~1com.nixsensor.universalsdk~1documentation~1NixUniversalSDK~1DeviceScannerState~1IDLE\/title","value":"DeviceScannerStateIDLE"},{"value":[{"kind":"identifier","text":"DeviceScannerStateIDLE"}],"path":"\/references\/doc:~1~1com.nixsensor.universalsdk~1documentation~1NixUniversalSDK~1DeviceScannerState~1IDLE\/fragments","op":"replace"},{"value":"connect:","op":"replace","path":"\/references\/doc:~1~1com.nixsensor.universalsdk~1documentation~1NixUniversalSDK~1IDeviceCompat~1connect(delegate:)\/title"},{"path":"\/references\/doc:~1~1com.nixsensor.universalsdk~1documentation~1NixUniversalSDK~1IDeviceCompat~1connect(delegate:)\/fragments","value":[{"kind":"text","text":"- "},{"text":"connect:","kind":"identifier"}],"op":"replace"},{"value":"DeviceScannerStateERROR_LICENSE","path":"\/references\/doc:~1~1com.nixsensor.universalsdk~1documentation~1NixUniversalSDK~1DeviceScannerState~1ERROR_LICENSE\/title","op":"replace"},{"op":"replace","path":"\/references\/doc:~1~1com.nixsensor.universalsdk~1documentation~1NixUniversalSDK~1DeviceScannerState~1ERROR_LICENSE\/fragments","value":[{"kind":"identifier","text":"DeviceScannerStateERROR_LICENSE"}]},{"value":"disconnect","op":"replace","path":"\/references\/doc:~1~1com.nixsensor.universalsdk~1documentation~1NixUniversalSDK~1IDeviceCompat~1disconnect()\/title"},{"path":"\/references\/doc:~1~1com.nixsensor.universalsdk~1documentation~1NixUniversalSDK~1IDeviceCompat~1disconnect()\/fragments","op":"replace","value":[{"kind":"text","text":"- "},{"text":"disconnect","kind":"identifier"}]},{"value":"LicenseManager","path":"\/references\/doc:~1~1com.nixsensor.universalsdk~1documentation~1NixUniversalSDK~1LicenseManager\/title","op":"replace"},{"path":"\/references\/doc:~1~1com.nixsensor.universalsdk~1documentation~1NixUniversalSDK~1LicenseManager\/fragments","value":[{"text":"LicenseManager","kind":"identifier"}],"op":"replace"},{"path":"\/references\/doc:~1~1com.nixsensor.universalsdk~1documentation~1NixUniversalSDK~1LicenseManager\/navigatorTitle","value":[{"kind":"identifier","text":"LicenseManager"}],"op":"replace"},{"path":"\/references\/doc:~1~1com.nixsensor.universalsdk~1documentation~1NixUniversalSDK~1LicenseManager~1state\/title","op":"replace","value":"state"},{"value":[{"text":"state","kind":"identifier"}],"path":"\/references\/doc:~1~1com.nixsensor.universalsdk~1documentation~1NixUniversalSDK~1LicenseManager~1state\/fragments","op":"replace"},{"value":"id","op":"replace","path":"\/references\/doc:~1~1com.nixsensor.universalsdk~1documentation~1NixUniversalSDK~1IDeviceCompat~1id\/title"},{"value":[{"text":"id","kind":"identifier"}],"path":"\/references\/doc:~1~1com.nixsensor.universalsdk~1documentation~1NixUniversalSDK~1IDeviceCompat~1id\/fragments","op":"replace"},{"op":"replace","value":"onScannerStopped:","path":"\/references\/doc:~1~1com.nixsensor.universalsdk~1documentation~1NixUniversalSDK~1ScannerStateDelegate~1onScannerStopped(_:)\/title"},{"op":"replace","value":[{"kind":"text","text":"- "},{"text":"onScannerStopped:","kind":"identifier"}],"path":"\/references\/doc:~1~1com.nixsensor.universalsdk~1documentation~1NixUniversalSDK~1ScannerStateDelegate~1onScannerStopped(_:)\/fragments"},{"path":"\/references\/doc:~1~1com.nixsensor.universalsdk~1documentation~1NixUniversalSDK~1DeviceScanner\/title","value":"DeviceScanner","op":"replace"},{"value":[{"text":"DeviceScanner","kind":"identifier"}],"op":"replace","path":"\/references\/doc:~1~1com.nixsensor.universalsdk~1documentation~1NixUniversalSDK~1DeviceScanner\/fragments"},{"op":"replace","value":[{"kind":"identifier","text":"DeviceScanner"}],"path":"\/references\/doc:~1~1com.nixsensor.universalsdk~1documentation~1NixUniversalSDK~1DeviceScanner\/navigatorTitle"},{"op":"replace","path":"\/references\/doc:~1~1com.nixsensor.universalsdk~1documentation~1NixUniversalSDK~1IDeviceCompat~1type\/title","value":"type"},{"value":[{"text":"type","kind":"identifier"}],"path":"\/references\/doc:~1~1com.nixsensor.universalsdk~1documentation~1NixUniversalSDK~1IDeviceCompat~1type\/fragments","op":"replace"},{"op":"replace","path":"\/references\/doc:~1~1com.nixsensor.universalsdk~1documentation~1NixUniversalSDK~1IDeviceCompat~1interfaceType\/title","value":"interfaceType"},{"value":[{"text":"interfaceType","kind":"identifier"}],"op":"replace","path":"\/references\/doc:~1~1com.nixsensor.universalsdk~1documentation~1NixUniversalSDK~1IDeviceCompat~1interfaceType\/fragments"}]}]}